#include "system.h"
#include "sys/alt_stdio.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_timer_regs.h"
#include <stdint.h>
#include "io.h"
#include "alt_types.h"
#include "unistd.h"

#define BUTTONS_BASE 0x3050 // Dirección base de los botones
#define LEDS_BASE 0x30a0 // Dirección base de los LEDs
#define SSEG_HOUR_TENS_BASE 0x3030 // Dirección base de los segmentos LED de horas (decenas)
#define SSEG_HOUR_UNITS_BASE 0x3090 // Dirección base de los segmentos LED de horas (unidades)
#define SSEG_MINS_TENS_BASE 0x3060 // Dirección base de los segmentos LED de minutos (decenas)
#define SSEG_MIN_UNITS_BASE 0x3080 // Dirección base de los segmentos LED de minutos (unidades)
#define SSEG_SEC_TENS_BASE 0x3040 // Dirección base de los segmentos LED de segundos (decenas)
#define SSEG_SEC_UNITS_BASE 0x3070 // Dirección base de los segmentos LED de segundos (unidades)
#define SWITCH_BASE 0x3020 // Dirección base del switch
#define TIMER_BASE 0x3000 // Dirección base del temporizador
#define BUZZER_BASE 0x3010 // Dirección base del buzzer
#define BUZZER_FREQUENCY 1000 // Frecuencia del buzzer en Hz (ajústala según el buzzer)

uint8_t horas = 0, minutos = 0, segundos = 0;
uint8_t horas_alarma = -1, minutos_alarma = -1, segundos_alarma = -1;
uint8_t counting = 0; // 0: No contando, 1: Contando

uint8_t alarma_activa = 0;  // 0: Alarma no activa, 1: Alarma activa
uint8_t segundos_alarma_activa = 0;  // Contador de los segundos con la alarma activa

uint8_t num_to_seven_seg(int num) {
    static const uint8_t patterns[10] = {
        0x3F, // 0
        0x06, // 1
        0x5B, // 2
        0x4F, // 3
        0x66, // 4
        0x6D, // 5
        0x7D, // 6
        0x07, // 7
        0x7F, // 8
        0x6F  // 9
    };
    return ~patterns[num]; // Asegúrate de invertir si los LEDs son comunes al cátodo
}

void display_digit(uint32_t sseg_base, uint8_t digit) {
    if (digit < 10) {
        IOWR_ALTERA_AVALON_PIO_DATA(sseg_base, num_to_seven_seg(digit));
    }
}

void update_hours() {
    display_digit(SSEG_HOUR_TENS_BASE, horas / 10);
    display_digit(SSEG_HOUR_UNITS_BASE, horas % 10);
}

void update_minutes() {
    display_digit(SSEG_MINS_TENS_BASE, minutos / 10);
    display_digit(SSEG_MIN_UNITS_BASE, minutos % 10);
}

void update_seconds() {
    display_digit(SSEG_SEC_TENS_BASE, segundos / 10);
    display_digit(SSEG_SEC_UNITS_BASE, segundos % 10);
}

uint32_t debounce_buttons() {
    uint32_t stable_state;
    uint32_t last_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    for (int i = 0; i < 10000; i++) { // Pequeño retraso para debouncing
        stable_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
        if (stable_state == last_state) {
            return stable_state;
        }
        last_state = stable_state;
    }
    return stable_state;
}

uint32_t read_switch() {
    return IORD_ALTERA_AVALON_PIO_DATA(SWITCH_BASE); // Lee el estado del switch
}

uint32_t read_leds() {
    return IORD_ALTERA_AVALON_PIO_DATA(LEDS_BASE); // Lee el estado de los leds
}

void init_timer() {
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x00); // Detiene el temporizador
    IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_BASE, (TIMER_LOAD_VALUE & 0xFFFF)); // Configura el periodo bajo
    IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_BASE, (TIMER_LOAD_VALUE >> 16)); // Configura el periodo alto
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x07); // Habilita el temporizador y genera una interrupción en cada overflow
}

void wait_for_timer() {
    while (!(IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE) & 0x01)) {
        // Espera hasta que el temporizador se desborde
    }
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0x01); // Limpiar el estado de interrupción del temporizador
}

void start_buzzer(uint32_t frequency) {
    uint32_t period = 50000000 / (2 * frequency); // Período para la frecuencia deseada
    for (uint32_t i = 0; i < frequency * 2; i++) { // Genera el tono durante un segundo
        IOWR_ALTERA_AVALON_PIO_DATA(BUZZER_BASE, 1);
        usleep(period); // Espera medio período
        IOWR_ALTERA_AVALON_PIO_DATA(BUZZER_BASE, 0);
        usleep(period); // Espera medio período
    }
}

int main() {
    IOWR_ALTERA_AVALON_PIO_DIRECTION(LEDS_BASE, 0xFF); // LEDs como salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(BUTTONS_BASE, 0x00); // Botones como entradas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SWITCH_BASE, 0x00); // Switch como entrada
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_HOUR_TENS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_HOUR_UNITS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_MINS_TENS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_MIN_UNITS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_SEC_TENS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_SEC_UNITS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(BUZZER_BASE, 0x01); // Buzzer como salida

    init_timer();

    uint32_t prev_buttons_state = debounce_buttons(); // Estado inicial de los botones
    uint32_t switch_state = read_switch(); // Estado inicial del switch

    update_hours();
    update_minutes();
    update_seconds();

    while (1) {
        uint32_t buttons_state = debounce_buttons(); // Lee el estado de los botones con debouncing
        uint32_t new_switch_state = read_switch(); // Lee el estado actual del switch
        uint32_t new_leds_state = read_leds(); // Lee el estado actual de los LEDs

        if ((buttons_state != prev_buttons_state) && !(new_switch_state & 0x01)) {
            uint32_t changed_buttons = buttons_state ^ prev_buttons_state; // Detecta botones que cambiaron de estado
            prev_buttons_state = buttons_state;

            if ((changed_buttons & 0x01) && (buttons_state & 0x01)) {
                segundos = (segundos + 1) % 60;
                update_seconds();
            }

            if ((changed_buttons & 0x02) && (buttons_state & 0x02)) {
                minutos = (minutos + 1) % 60;
                update_minutes();
            }

            if ((changed_buttons & 0x04) && (buttons_state & 0x04)) {
                horas = (horas + 1) % 24;
                update_hours();
            }

            if ((changed_buttons & 0x08) && (buttons_state & 0x08)) {
                horas_alarma = horas;
                minutos_alarma = minutos;
                segundos_alarma = segundos;
            }
        }

        if ((buttons_state != prev_buttons_state) && (new_switch_state & 0x01)) {
            uint32_t changed_buttons = buttons_state ^ prev_buttons_state; // Detecta botones que cambiaron de estado
            prev_buttons_state = buttons_state;

            if ((changed_buttons & 0x01) && (buttons_state & 0x01)) {
                segundos_alarma = (segundos_alarma + 1) % 60;
            }

            if ((changed_buttons & 0x02) && (buttons_state & 0x02)) {
                minutos_alarma = (minutos_alarma + 1) % 60;
            }

            if ((changed_buttons & 0x04) && (buttons_state & 0x04)) {
                horas_alarma = (horas_alarma + 1) % 24;
            }
        }

        if (new_switch_state & 0x01) {
            IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, 1 << 9);
        } else {
            IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, new_leds_state);
        }

        if (counting) {
            wait_for_timer(); // Espera el tiempo definido

            segundos++;
            if (segundos >= 60) {
                segundos = 0;
                minutos++;
                if (minutos >= 60) {
                    minutos = 0;
                    horas++;
                    if (horas >= 24) {
                        horas = 0;
                    }
                    update_hours();
                }
                update_minutes();
            }
            update_seconds();

            if (horas == horas_alarma && minutos == minutos_alarma && segundos == segundos_alarma) {
                alarma_activa = 1;
                segundos_alarma_activa = 0; // Reinicia el contador de segundos con la alarma activa
            }
        }

        if (alarma_activa) {
            if (segundos_alarma_activa < 10) {
                start_buzzer(BUZZER_FREQUENCY); // Suena el buzzer durante 10 segundos
                segundos_alarma_activa++;
            } else {
                alarma_activa = 0; // Desactiva la alarma después de 10 segundos
                segundos_alarma_activa = 0;
            }
        }

        if (new_switch_state != switch_state) {
            switch_state = new_switch_state;
            counting = switch_state & 0x01;
        }
    }

    return 0;
}
