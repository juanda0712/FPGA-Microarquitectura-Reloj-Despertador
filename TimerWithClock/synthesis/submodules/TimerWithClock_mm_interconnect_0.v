// TimerWithClock_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 23.1 993

`timescale 1 ps / 1 ps
module TimerWithClock_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                    //                                  clk_0_clk.clk
		input  wire        SRAM_reset1_reset_bridge_in_reset_reset,          //          SRAM_reset1_reset_bridge_in_reset.reset
		input  wire        TimerWithClock_reset_reset_bridge_in_reset_reset, // TimerWithClock_reset_reset_bridge_in_reset.reset
		input  wire [13:0] TimerWithClock_data_master_address,               //                 TimerWithClock_data_master.address
		output wire        TimerWithClock_data_master_waitrequest,           //                                           .waitrequest
		input  wire [3:0]  TimerWithClock_data_master_byteenable,            //                                           .byteenable
		input  wire        TimerWithClock_data_master_read,                  //                                           .read
		output wire [31:0] TimerWithClock_data_master_readdata,              //                                           .readdata
		input  wire        TimerWithClock_data_master_write,                 //                                           .write
		input  wire [31:0] TimerWithClock_data_master_writedata,             //                                           .writedata
		input  wire        TimerWithClock_data_master_debugaccess,           //                                           .debugaccess
		input  wire [13:0] TimerWithClock_instruction_master_address,        //          TimerWithClock_instruction_master.address
		output wire        TimerWithClock_instruction_master_waitrequest,    //                                           .waitrequest
		input  wire        TimerWithClock_instruction_master_read,           //                                           .read
		output wire [31:0] TimerWithClock_instruction_master_readdata,       //                                           .readdata
		output wire [1:0]  BUTTONS_s1_address,                               //                                 BUTTONS_s1.address
		input  wire [31:0] BUTTONS_s1_readdata,                              //                                           .readdata
		output wire [0:0]  DEBUG_avalon_jtag_slave_address,                  //                    DEBUG_avalon_jtag_slave.address
		output wire        DEBUG_avalon_jtag_slave_write,                    //                                           .write
		output wire        DEBUG_avalon_jtag_slave_read,                     //                                           .read
		input  wire [31:0] DEBUG_avalon_jtag_slave_readdata,                 //                                           .readdata
		output wire [31:0] DEBUG_avalon_jtag_slave_writedata,                //                                           .writedata
		input  wire        DEBUG_avalon_jtag_slave_waitrequest,              //                                           .waitrequest
		output wire        DEBUG_avalon_jtag_slave_chipselect,               //                                           .chipselect
		output wire [1:0]  LED_s1_address,                                   //                                     LED_s1.address
		output wire        LED_s1_write,                                     //                                           .write
		input  wire [31:0] LED_s1_readdata,                                  //                                           .readdata
		output wire [31:0] LED_s1_writedata,                                 //                                           .writedata
		output wire        LED_s1_chipselect,                                //                                           .chipselect
		output wire [9:0]  SRAM_s1_address,                                  //                                    SRAM_s1.address
		output wire        SRAM_s1_write,                                    //                                           .write
		input  wire [31:0] SRAM_s1_readdata,                                 //                                           .readdata
		output wire [31:0] SRAM_s1_writedata,                                //                                           .writedata
		output wire [3:0]  SRAM_s1_byteenable,                               //                                           .byteenable
		output wire        SRAM_s1_chipselect,                               //                                           .chipselect
		output wire        SRAM_s1_clken,                                    //                                           .clken
		output wire [1:0]  SSEG_HOUR_s1_address,                             //                               SSEG_HOUR_s1.address
		output wire        SSEG_HOUR_s1_write,                               //                                           .write
		input  wire [31:0] SSEG_HOUR_s1_readdata,                            //                                           .readdata
		output wire [31:0] SSEG_HOUR_s1_writedata,                           //                                           .writedata
		output wire        SSEG_HOUR_s1_chipselect,                          //                                           .chipselect
		output wire [1:0]  SSEG_MIN_s1_address,                              //                                SSEG_MIN_s1.address
		output wire        SSEG_MIN_s1_write,                                //                                           .write
		input  wire [31:0] SSEG_MIN_s1_readdata,                             //                                           .readdata
		output wire [31:0] SSEG_MIN_s1_writedata,                            //                                           .writedata
		output wire        SSEG_MIN_s1_chipselect,                           //                                           .chipselect
		output wire [1:0]  SSEG_SEC_s1_address,                              //                                SSEG_SEC_s1.address
		output wire        SSEG_SEC_s1_write,                                //                                           .write
		input  wire [31:0] SSEG_SEC_s1_readdata,                             //                                           .readdata
		output wire [31:0] SSEG_SEC_s1_writedata,                            //                                           .writedata
		output wire        SSEG_SEC_s1_chipselect,                           //                                           .chipselect
		output wire [1:0]  SWITCH_s1_address,                                //                                  SWITCH_s1.address
		input  wire [31:0] SWITCH_s1_readdata,                               //                                           .readdata
		output wire [2:0]  timer_0_s1_address,                               //                                 timer_0_s1.address
		output wire        timer_0_s1_write,                                 //                                           .write
		input  wire [15:0] timer_0_s1_readdata,                              //                                           .readdata
		output wire [15:0] timer_0_s1_writedata,                             //                                           .writedata
		output wire        timer_0_s1_chipselect,                            //                                           .chipselect
		output wire [8:0]  TimerWithClock_debug_mem_slave_address,           //             TimerWithClock_debug_mem_slave.address
		output wire        TimerWithClock_debug_mem_slave_write,             //                                           .write
		output wire        TimerWithClock_debug_mem_slave_read,              //                                           .read
		input  wire [31:0] TimerWithClock_debug_mem_slave_readdata,          //                                           .readdata
		output wire [31:0] TimerWithClock_debug_mem_slave_writedata,         //                                           .writedata
		output wire [3:0]  TimerWithClock_debug_mem_slave_byteenable,        //                                           .byteenable
		input  wire        TimerWithClock_debug_mem_slave_waitrequest,       //                                           .waitrequest
		output wire        TimerWithClock_debug_mem_slave_debugaccess        //                                           .debugaccess
	);

	wire         timerwithclock_data_master_translator_avalon_universal_master_0_waitrequest;          // TimerWithClock_data_master_agent:av_waitrequest -> TimerWithClock_data_master_translator:uav_waitrequest
	wire  [31:0] timerwithclock_data_master_translator_avalon_universal_master_0_readdata;             // TimerWithClock_data_master_agent:av_readdata -> TimerWithClock_data_master_translator:uav_readdata
	wire         timerwithclock_data_master_translator_avalon_universal_master_0_debugaccess;          // TimerWithClock_data_master_translator:uav_debugaccess -> TimerWithClock_data_master_agent:av_debugaccess
	wire  [13:0] timerwithclock_data_master_translator_avalon_universal_master_0_address;              // TimerWithClock_data_master_translator:uav_address -> TimerWithClock_data_master_agent:av_address
	wire         timerwithclock_data_master_translator_avalon_universal_master_0_read;                 // TimerWithClock_data_master_translator:uav_read -> TimerWithClock_data_master_agent:av_read
	wire   [3:0] timerwithclock_data_master_translator_avalon_universal_master_0_byteenable;           // TimerWithClock_data_master_translator:uav_byteenable -> TimerWithClock_data_master_agent:av_byteenable
	wire         timerwithclock_data_master_translator_avalon_universal_master_0_readdatavalid;        // TimerWithClock_data_master_agent:av_readdatavalid -> TimerWithClock_data_master_translator:uav_readdatavalid
	wire         timerwithclock_data_master_translator_avalon_universal_master_0_lock;                 // TimerWithClock_data_master_translator:uav_lock -> TimerWithClock_data_master_agent:av_lock
	wire         timerwithclock_data_master_translator_avalon_universal_master_0_write;                // TimerWithClock_data_master_translator:uav_write -> TimerWithClock_data_master_agent:av_write
	wire  [31:0] timerwithclock_data_master_translator_avalon_universal_master_0_writedata;            // TimerWithClock_data_master_translator:uav_writedata -> TimerWithClock_data_master_agent:av_writedata
	wire   [2:0] timerwithclock_data_master_translator_avalon_universal_master_0_burstcount;           // TimerWithClock_data_master_translator:uav_burstcount -> TimerWithClock_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                    // rsp_mux:src_valid -> TimerWithClock_data_master_agent:rp_valid
	wire  [91:0] rsp_mux_src_data;                                                                     // rsp_mux:src_data -> TimerWithClock_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                                    // TimerWithClock_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [9:0] rsp_mux_src_channel;                                                                  // rsp_mux:src_channel -> TimerWithClock_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                            // rsp_mux:src_startofpacket -> TimerWithClock_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                              // rsp_mux:src_endofpacket -> TimerWithClock_data_master_agent:rp_endofpacket
	wire         timerwithclock_instruction_master_translator_avalon_universal_master_0_waitrequest;   // TimerWithClock_instruction_master_agent:av_waitrequest -> TimerWithClock_instruction_master_translator:uav_waitrequest
	wire  [31:0] timerwithclock_instruction_master_translator_avalon_universal_master_0_readdata;      // TimerWithClock_instruction_master_agent:av_readdata -> TimerWithClock_instruction_master_translator:uav_readdata
	wire         timerwithclock_instruction_master_translator_avalon_universal_master_0_debugaccess;   // TimerWithClock_instruction_master_translator:uav_debugaccess -> TimerWithClock_instruction_master_agent:av_debugaccess
	wire  [13:0] timerwithclock_instruction_master_translator_avalon_universal_master_0_address;       // TimerWithClock_instruction_master_translator:uav_address -> TimerWithClock_instruction_master_agent:av_address
	wire         timerwithclock_instruction_master_translator_avalon_universal_master_0_read;          // TimerWithClock_instruction_master_translator:uav_read -> TimerWithClock_instruction_master_agent:av_read
	wire   [3:0] timerwithclock_instruction_master_translator_avalon_universal_master_0_byteenable;    // TimerWithClock_instruction_master_translator:uav_byteenable -> TimerWithClock_instruction_master_agent:av_byteenable
	wire         timerwithclock_instruction_master_translator_avalon_universal_master_0_readdatavalid; // TimerWithClock_instruction_master_agent:av_readdatavalid -> TimerWithClock_instruction_master_translator:uav_readdatavalid
	wire         timerwithclock_instruction_master_translator_avalon_universal_master_0_lock;          // TimerWithClock_instruction_master_translator:uav_lock -> TimerWithClock_instruction_master_agent:av_lock
	wire         timerwithclock_instruction_master_translator_avalon_universal_master_0_write;         // TimerWithClock_instruction_master_translator:uav_write -> TimerWithClock_instruction_master_agent:av_write
	wire  [31:0] timerwithclock_instruction_master_translator_avalon_universal_master_0_writedata;     // TimerWithClock_instruction_master_translator:uav_writedata -> TimerWithClock_instruction_master_agent:av_writedata
	wire   [2:0] timerwithclock_instruction_master_translator_avalon_universal_master_0_burstcount;    // TimerWithClock_instruction_master_translator:uav_burstcount -> TimerWithClock_instruction_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                                // rsp_mux_001:src_valid -> TimerWithClock_instruction_master_agent:rp_valid
	wire  [91:0] rsp_mux_001_src_data;                                                                 // rsp_mux_001:src_data -> TimerWithClock_instruction_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                                // TimerWithClock_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [9:0] rsp_mux_001_src_channel;                                                              // rsp_mux_001:src_channel -> TimerWithClock_instruction_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                        // rsp_mux_001:src_startofpacket -> TimerWithClock_instruction_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                          // rsp_mux_001:src_endofpacket -> TimerWithClock_instruction_master_agent:rp_endofpacket
	wire  [31:0] debug_avalon_jtag_slave_agent_m0_readdata;                                            // DEBUG_avalon_jtag_slave_translator:uav_readdata -> DEBUG_avalon_jtag_slave_agent:m0_readdata
	wire         debug_avalon_jtag_slave_agent_m0_waitrequest;                                         // DEBUG_avalon_jtag_slave_translator:uav_waitrequest -> DEBUG_avalon_jtag_slave_agent:m0_waitrequest
	wire         debug_avalon_jtag_slave_agent_m0_debugaccess;                                         // DEBUG_avalon_jtag_slave_agent:m0_debugaccess -> DEBUG_avalon_jtag_slave_translator:uav_debugaccess
	wire  [13:0] debug_avalon_jtag_slave_agent_m0_address;                                             // DEBUG_avalon_jtag_slave_agent:m0_address -> DEBUG_avalon_jtag_slave_translator:uav_address
	wire   [3:0] debug_avalon_jtag_slave_agent_m0_byteenable;                                          // DEBUG_avalon_jtag_slave_agent:m0_byteenable -> DEBUG_avalon_jtag_slave_translator:uav_byteenable
	wire         debug_avalon_jtag_slave_agent_m0_read;                                                // DEBUG_avalon_jtag_slave_agent:m0_read -> DEBUG_avalon_jtag_slave_translator:uav_read
	wire         debug_avalon_jtag_slave_agent_m0_readdatavalid;                                       // DEBUG_avalon_jtag_slave_translator:uav_readdatavalid -> DEBUG_avalon_jtag_slave_agent:m0_readdatavalid
	wire         debug_avalon_jtag_slave_agent_m0_lock;                                                // DEBUG_avalon_jtag_slave_agent:m0_lock -> DEBUG_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] debug_avalon_jtag_slave_agent_m0_writedata;                                           // DEBUG_avalon_jtag_slave_agent:m0_writedata -> DEBUG_avalon_jtag_slave_translator:uav_writedata
	wire         debug_avalon_jtag_slave_agent_m0_write;                                               // DEBUG_avalon_jtag_slave_agent:m0_write -> DEBUG_avalon_jtag_slave_translator:uav_write
	wire   [2:0] debug_avalon_jtag_slave_agent_m0_burstcount;                                          // DEBUG_avalon_jtag_slave_agent:m0_burstcount -> DEBUG_avalon_jtag_slave_translator:uav_burstcount
	wire         debug_avalon_jtag_slave_agent_rf_source_valid;                                        // DEBUG_avalon_jtag_slave_agent:rf_source_valid -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [92:0] debug_avalon_jtag_slave_agent_rf_source_data;                                         // DEBUG_avalon_jtag_slave_agent:rf_source_data -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         debug_avalon_jtag_slave_agent_rf_source_ready;                                        // DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_ready -> DEBUG_avalon_jtag_slave_agent:rf_source_ready
	wire         debug_avalon_jtag_slave_agent_rf_source_startofpacket;                                // DEBUG_avalon_jtag_slave_agent:rf_source_startofpacket -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         debug_avalon_jtag_slave_agent_rf_source_endofpacket;                                  // DEBUG_avalon_jtag_slave_agent:rf_source_endofpacket -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         debug_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                     // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_valid -> DEBUG_avalon_jtag_slave_agent:rf_sink_valid
	wire  [92:0] debug_avalon_jtag_slave_agent_rsp_fifo_out_data;                                      // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_data -> DEBUG_avalon_jtag_slave_agent:rf_sink_data
	wire         debug_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                     // DEBUG_avalon_jtag_slave_agent:rf_sink_ready -> DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         debug_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                             // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> DEBUG_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         debug_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                               // DEBUG_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> DEBUG_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                                    // cmd_mux:src_valid -> DEBUG_avalon_jtag_slave_agent:cp_valid
	wire  [91:0] cmd_mux_src_data;                                                                     // cmd_mux:src_data -> DEBUG_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                                    // DEBUG_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [9:0] cmd_mux_src_channel;                                                                  // cmd_mux:src_channel -> DEBUG_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                            // cmd_mux:src_startofpacket -> DEBUG_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                              // cmd_mux:src_endofpacket -> DEBUG_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] timerwithclock_debug_mem_slave_agent_m0_readdata;                                     // TimerWithClock_debug_mem_slave_translator:uav_readdata -> TimerWithClock_debug_mem_slave_agent:m0_readdata
	wire         timerwithclock_debug_mem_slave_agent_m0_waitrequest;                                  // TimerWithClock_debug_mem_slave_translator:uav_waitrequest -> TimerWithClock_debug_mem_slave_agent:m0_waitrequest
	wire         timerwithclock_debug_mem_slave_agent_m0_debugaccess;                                  // TimerWithClock_debug_mem_slave_agent:m0_debugaccess -> TimerWithClock_debug_mem_slave_translator:uav_debugaccess
	wire  [13:0] timerwithclock_debug_mem_slave_agent_m0_address;                                      // TimerWithClock_debug_mem_slave_agent:m0_address -> TimerWithClock_debug_mem_slave_translator:uav_address
	wire   [3:0] timerwithclock_debug_mem_slave_agent_m0_byteenable;                                   // TimerWithClock_debug_mem_slave_agent:m0_byteenable -> TimerWithClock_debug_mem_slave_translator:uav_byteenable
	wire         timerwithclock_debug_mem_slave_agent_m0_read;                                         // TimerWithClock_debug_mem_slave_agent:m0_read -> TimerWithClock_debug_mem_slave_translator:uav_read
	wire         timerwithclock_debug_mem_slave_agent_m0_readdatavalid;                                // TimerWithClock_debug_mem_slave_translator:uav_readdatavalid -> TimerWithClock_debug_mem_slave_agent:m0_readdatavalid
	wire         timerwithclock_debug_mem_slave_agent_m0_lock;                                         // TimerWithClock_debug_mem_slave_agent:m0_lock -> TimerWithClock_debug_mem_slave_translator:uav_lock
	wire  [31:0] timerwithclock_debug_mem_slave_agent_m0_writedata;                                    // TimerWithClock_debug_mem_slave_agent:m0_writedata -> TimerWithClock_debug_mem_slave_translator:uav_writedata
	wire         timerwithclock_debug_mem_slave_agent_m0_write;                                        // TimerWithClock_debug_mem_slave_agent:m0_write -> TimerWithClock_debug_mem_slave_translator:uav_write
	wire   [2:0] timerwithclock_debug_mem_slave_agent_m0_burstcount;                                   // TimerWithClock_debug_mem_slave_agent:m0_burstcount -> TimerWithClock_debug_mem_slave_translator:uav_burstcount
	wire         timerwithclock_debug_mem_slave_agent_rf_source_valid;                                 // TimerWithClock_debug_mem_slave_agent:rf_source_valid -> TimerWithClock_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [92:0] timerwithclock_debug_mem_slave_agent_rf_source_data;                                  // TimerWithClock_debug_mem_slave_agent:rf_source_data -> TimerWithClock_debug_mem_slave_agent_rsp_fifo:in_data
	wire         timerwithclock_debug_mem_slave_agent_rf_source_ready;                                 // TimerWithClock_debug_mem_slave_agent_rsp_fifo:in_ready -> TimerWithClock_debug_mem_slave_agent:rf_source_ready
	wire         timerwithclock_debug_mem_slave_agent_rf_source_startofpacket;                         // TimerWithClock_debug_mem_slave_agent:rf_source_startofpacket -> TimerWithClock_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         timerwithclock_debug_mem_slave_agent_rf_source_endofpacket;                           // TimerWithClock_debug_mem_slave_agent:rf_source_endofpacket -> TimerWithClock_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         timerwithclock_debug_mem_slave_agent_rsp_fifo_out_valid;                              // TimerWithClock_debug_mem_slave_agent_rsp_fifo:out_valid -> TimerWithClock_debug_mem_slave_agent:rf_sink_valid
	wire  [92:0] timerwithclock_debug_mem_slave_agent_rsp_fifo_out_data;                               // TimerWithClock_debug_mem_slave_agent_rsp_fifo:out_data -> TimerWithClock_debug_mem_slave_agent:rf_sink_data
	wire         timerwithclock_debug_mem_slave_agent_rsp_fifo_out_ready;                              // TimerWithClock_debug_mem_slave_agent:rf_sink_ready -> TimerWithClock_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         timerwithclock_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // TimerWithClock_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> TimerWithClock_debug_mem_slave_agent:rf_sink_startofpacket
	wire         timerwithclock_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // TimerWithClock_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> TimerWithClock_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                                // cmd_mux_001:src_valid -> TimerWithClock_debug_mem_slave_agent:cp_valid
	wire  [91:0] cmd_mux_001_src_data;                                                                 // cmd_mux_001:src_data -> TimerWithClock_debug_mem_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                                // TimerWithClock_debug_mem_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [9:0] cmd_mux_001_src_channel;                                                              // cmd_mux_001:src_channel -> TimerWithClock_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                        // cmd_mux_001:src_startofpacket -> TimerWithClock_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                          // cmd_mux_001:src_endofpacket -> TimerWithClock_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] sram_s1_agent_m0_readdata;                                                            // SRAM_s1_translator:uav_readdata -> SRAM_s1_agent:m0_readdata
	wire         sram_s1_agent_m0_waitrequest;                                                         // SRAM_s1_translator:uav_waitrequest -> SRAM_s1_agent:m0_waitrequest
	wire         sram_s1_agent_m0_debugaccess;                                                         // SRAM_s1_agent:m0_debugaccess -> SRAM_s1_translator:uav_debugaccess
	wire  [13:0] sram_s1_agent_m0_address;                                                             // SRAM_s1_agent:m0_address -> SRAM_s1_translator:uav_address
	wire   [3:0] sram_s1_agent_m0_byteenable;                                                          // SRAM_s1_agent:m0_byteenable -> SRAM_s1_translator:uav_byteenable
	wire         sram_s1_agent_m0_read;                                                                // SRAM_s1_agent:m0_read -> SRAM_s1_translator:uav_read
	wire         sram_s1_agent_m0_readdatavalid;                                                       // SRAM_s1_translator:uav_readdatavalid -> SRAM_s1_agent:m0_readdatavalid
	wire         sram_s1_agent_m0_lock;                                                                // SRAM_s1_agent:m0_lock -> SRAM_s1_translator:uav_lock
	wire  [31:0] sram_s1_agent_m0_writedata;                                                           // SRAM_s1_agent:m0_writedata -> SRAM_s1_translator:uav_writedata
	wire         sram_s1_agent_m0_write;                                                               // SRAM_s1_agent:m0_write -> SRAM_s1_translator:uav_write
	wire   [2:0] sram_s1_agent_m0_burstcount;                                                          // SRAM_s1_agent:m0_burstcount -> SRAM_s1_translator:uav_burstcount
	wire         sram_s1_agent_rf_source_valid;                                                        // SRAM_s1_agent:rf_source_valid -> SRAM_s1_agent_rsp_fifo:in_valid
	wire  [92:0] sram_s1_agent_rf_source_data;                                                         // SRAM_s1_agent:rf_source_data -> SRAM_s1_agent_rsp_fifo:in_data
	wire         sram_s1_agent_rf_source_ready;                                                        // SRAM_s1_agent_rsp_fifo:in_ready -> SRAM_s1_agent:rf_source_ready
	wire         sram_s1_agent_rf_source_startofpacket;                                                // SRAM_s1_agent:rf_source_startofpacket -> SRAM_s1_agent_rsp_fifo:in_startofpacket
	wire         sram_s1_agent_rf_source_endofpacket;                                                  // SRAM_s1_agent:rf_source_endofpacket -> SRAM_s1_agent_rsp_fifo:in_endofpacket
	wire         sram_s1_agent_rsp_fifo_out_valid;                                                     // SRAM_s1_agent_rsp_fifo:out_valid -> SRAM_s1_agent:rf_sink_valid
	wire  [92:0] sram_s1_agent_rsp_fifo_out_data;                                                      // SRAM_s1_agent_rsp_fifo:out_data -> SRAM_s1_agent:rf_sink_data
	wire         sram_s1_agent_rsp_fifo_out_ready;                                                     // SRAM_s1_agent:rf_sink_ready -> SRAM_s1_agent_rsp_fifo:out_ready
	wire         sram_s1_agent_rsp_fifo_out_startofpacket;                                             // SRAM_s1_agent_rsp_fifo:out_startofpacket -> SRAM_s1_agent:rf_sink_startofpacket
	wire         sram_s1_agent_rsp_fifo_out_endofpacket;                                               // SRAM_s1_agent_rsp_fifo:out_endofpacket -> SRAM_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                                // cmd_mux_002:src_valid -> SRAM_s1_agent:cp_valid
	wire  [91:0] cmd_mux_002_src_data;                                                                 // cmd_mux_002:src_data -> SRAM_s1_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                                // SRAM_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [9:0] cmd_mux_002_src_channel;                                                              // cmd_mux_002:src_channel -> SRAM_s1_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                        // cmd_mux_002:src_startofpacket -> SRAM_s1_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                          // cmd_mux_002:src_endofpacket -> SRAM_s1_agent:cp_endofpacket
	wire  [31:0] led_s1_agent_m0_readdata;                                                             // LED_s1_translator:uav_readdata -> LED_s1_agent:m0_readdata
	wire         led_s1_agent_m0_waitrequest;                                                          // LED_s1_translator:uav_waitrequest -> LED_s1_agent:m0_waitrequest
	wire         led_s1_agent_m0_debugaccess;                                                          // LED_s1_agent:m0_debugaccess -> LED_s1_translator:uav_debugaccess
	wire  [13:0] led_s1_agent_m0_address;                                                              // LED_s1_agent:m0_address -> LED_s1_translator:uav_address
	wire   [3:0] led_s1_agent_m0_byteenable;                                                           // LED_s1_agent:m0_byteenable -> LED_s1_translator:uav_byteenable
	wire         led_s1_agent_m0_read;                                                                 // LED_s1_agent:m0_read -> LED_s1_translator:uav_read
	wire         led_s1_agent_m0_readdatavalid;                                                        // LED_s1_translator:uav_readdatavalid -> LED_s1_agent:m0_readdatavalid
	wire         led_s1_agent_m0_lock;                                                                 // LED_s1_agent:m0_lock -> LED_s1_translator:uav_lock
	wire  [31:0] led_s1_agent_m0_writedata;                                                            // LED_s1_agent:m0_writedata -> LED_s1_translator:uav_writedata
	wire         led_s1_agent_m0_write;                                                                // LED_s1_agent:m0_write -> LED_s1_translator:uav_write
	wire   [2:0] led_s1_agent_m0_burstcount;                                                           // LED_s1_agent:m0_burstcount -> LED_s1_translator:uav_burstcount
	wire         led_s1_agent_rf_source_valid;                                                         // LED_s1_agent:rf_source_valid -> LED_s1_agent_rsp_fifo:in_valid
	wire  [92:0] led_s1_agent_rf_source_data;                                                          // LED_s1_agent:rf_source_data -> LED_s1_agent_rsp_fifo:in_data
	wire         led_s1_agent_rf_source_ready;                                                         // LED_s1_agent_rsp_fifo:in_ready -> LED_s1_agent:rf_source_ready
	wire         led_s1_agent_rf_source_startofpacket;                                                 // LED_s1_agent:rf_source_startofpacket -> LED_s1_agent_rsp_fifo:in_startofpacket
	wire         led_s1_agent_rf_source_endofpacket;                                                   // LED_s1_agent:rf_source_endofpacket -> LED_s1_agent_rsp_fifo:in_endofpacket
	wire         led_s1_agent_rsp_fifo_out_valid;                                                      // LED_s1_agent_rsp_fifo:out_valid -> LED_s1_agent:rf_sink_valid
	wire  [92:0] led_s1_agent_rsp_fifo_out_data;                                                       // LED_s1_agent_rsp_fifo:out_data -> LED_s1_agent:rf_sink_data
	wire         led_s1_agent_rsp_fifo_out_ready;                                                      // LED_s1_agent:rf_sink_ready -> LED_s1_agent_rsp_fifo:out_ready
	wire         led_s1_agent_rsp_fifo_out_startofpacket;                                              // LED_s1_agent_rsp_fifo:out_startofpacket -> LED_s1_agent:rf_sink_startofpacket
	wire         led_s1_agent_rsp_fifo_out_endofpacket;                                                // LED_s1_agent_rsp_fifo:out_endofpacket -> LED_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                                // cmd_mux_003:src_valid -> LED_s1_agent:cp_valid
	wire  [91:0] cmd_mux_003_src_data;                                                                 // cmd_mux_003:src_data -> LED_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                                // LED_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [9:0] cmd_mux_003_src_channel;                                                              // cmd_mux_003:src_channel -> LED_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                        // cmd_mux_003:src_startofpacket -> LED_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                          // cmd_mux_003:src_endofpacket -> LED_s1_agent:cp_endofpacket
	wire  [31:0] sseg_hour_s1_agent_m0_readdata;                                                       // SSEG_HOUR_s1_translator:uav_readdata -> SSEG_HOUR_s1_agent:m0_readdata
	wire         sseg_hour_s1_agent_m0_waitrequest;                                                    // SSEG_HOUR_s1_translator:uav_waitrequest -> SSEG_HOUR_s1_agent:m0_waitrequest
	wire         sseg_hour_s1_agent_m0_debugaccess;                                                    // SSEG_HOUR_s1_agent:m0_debugaccess -> SSEG_HOUR_s1_translator:uav_debugaccess
	wire  [13:0] sseg_hour_s1_agent_m0_address;                                                        // SSEG_HOUR_s1_agent:m0_address -> SSEG_HOUR_s1_translator:uav_address
	wire   [3:0] sseg_hour_s1_agent_m0_byteenable;                                                     // SSEG_HOUR_s1_agent:m0_byteenable -> SSEG_HOUR_s1_translator:uav_byteenable
	wire         sseg_hour_s1_agent_m0_read;                                                           // SSEG_HOUR_s1_agent:m0_read -> SSEG_HOUR_s1_translator:uav_read
	wire         sseg_hour_s1_agent_m0_readdatavalid;                                                  // SSEG_HOUR_s1_translator:uav_readdatavalid -> SSEG_HOUR_s1_agent:m0_readdatavalid
	wire         sseg_hour_s1_agent_m0_lock;                                                           // SSEG_HOUR_s1_agent:m0_lock -> SSEG_HOUR_s1_translator:uav_lock
	wire  [31:0] sseg_hour_s1_agent_m0_writedata;                                                      // SSEG_HOUR_s1_agent:m0_writedata -> SSEG_HOUR_s1_translator:uav_writedata
	wire         sseg_hour_s1_agent_m0_write;                                                          // SSEG_HOUR_s1_agent:m0_write -> SSEG_HOUR_s1_translator:uav_write
	wire   [2:0] sseg_hour_s1_agent_m0_burstcount;                                                     // SSEG_HOUR_s1_agent:m0_burstcount -> SSEG_HOUR_s1_translator:uav_burstcount
	wire         sseg_hour_s1_agent_rf_source_valid;                                                   // SSEG_HOUR_s1_agent:rf_source_valid -> SSEG_HOUR_s1_agent_rsp_fifo:in_valid
	wire  [92:0] sseg_hour_s1_agent_rf_source_data;                                                    // SSEG_HOUR_s1_agent:rf_source_data -> SSEG_HOUR_s1_agent_rsp_fifo:in_data
	wire         sseg_hour_s1_agent_rf_source_ready;                                                   // SSEG_HOUR_s1_agent_rsp_fifo:in_ready -> SSEG_HOUR_s1_agent:rf_source_ready
	wire         sseg_hour_s1_agent_rf_source_startofpacket;                                           // SSEG_HOUR_s1_agent:rf_source_startofpacket -> SSEG_HOUR_s1_agent_rsp_fifo:in_startofpacket
	wire         sseg_hour_s1_agent_rf_source_endofpacket;                                             // SSEG_HOUR_s1_agent:rf_source_endofpacket -> SSEG_HOUR_s1_agent_rsp_fifo:in_endofpacket
	wire         sseg_hour_s1_agent_rsp_fifo_out_valid;                                                // SSEG_HOUR_s1_agent_rsp_fifo:out_valid -> SSEG_HOUR_s1_agent:rf_sink_valid
	wire  [92:0] sseg_hour_s1_agent_rsp_fifo_out_data;                                                 // SSEG_HOUR_s1_agent_rsp_fifo:out_data -> SSEG_HOUR_s1_agent:rf_sink_data
	wire         sseg_hour_s1_agent_rsp_fifo_out_ready;                                                // SSEG_HOUR_s1_agent:rf_sink_ready -> SSEG_HOUR_s1_agent_rsp_fifo:out_ready
	wire         sseg_hour_s1_agent_rsp_fifo_out_startofpacket;                                        // SSEG_HOUR_s1_agent_rsp_fifo:out_startofpacket -> SSEG_HOUR_s1_agent:rf_sink_startofpacket
	wire         sseg_hour_s1_agent_rsp_fifo_out_endofpacket;                                          // SSEG_HOUR_s1_agent_rsp_fifo:out_endofpacket -> SSEG_HOUR_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                                // cmd_mux_004:src_valid -> SSEG_HOUR_s1_agent:cp_valid
	wire  [91:0] cmd_mux_004_src_data;                                                                 // cmd_mux_004:src_data -> SSEG_HOUR_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                                // SSEG_HOUR_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [9:0] cmd_mux_004_src_channel;                                                              // cmd_mux_004:src_channel -> SSEG_HOUR_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                        // cmd_mux_004:src_startofpacket -> SSEG_HOUR_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                          // cmd_mux_004:src_endofpacket -> SSEG_HOUR_s1_agent:cp_endofpacket
	wire  [31:0] sseg_min_s1_agent_m0_readdata;                                                        // SSEG_MIN_s1_translator:uav_readdata -> SSEG_MIN_s1_agent:m0_readdata
	wire         sseg_min_s1_agent_m0_waitrequest;                                                     // SSEG_MIN_s1_translator:uav_waitrequest -> SSEG_MIN_s1_agent:m0_waitrequest
	wire         sseg_min_s1_agent_m0_debugaccess;                                                     // SSEG_MIN_s1_agent:m0_debugaccess -> SSEG_MIN_s1_translator:uav_debugaccess
	wire  [13:0] sseg_min_s1_agent_m0_address;                                                         // SSEG_MIN_s1_agent:m0_address -> SSEG_MIN_s1_translator:uav_address
	wire   [3:0] sseg_min_s1_agent_m0_byteenable;                                                      // SSEG_MIN_s1_agent:m0_byteenable -> SSEG_MIN_s1_translator:uav_byteenable
	wire         sseg_min_s1_agent_m0_read;                                                            // SSEG_MIN_s1_agent:m0_read -> SSEG_MIN_s1_translator:uav_read
	wire         sseg_min_s1_agent_m0_readdatavalid;                                                   // SSEG_MIN_s1_translator:uav_readdatavalid -> SSEG_MIN_s1_agent:m0_readdatavalid
	wire         sseg_min_s1_agent_m0_lock;                                                            // SSEG_MIN_s1_agent:m0_lock -> SSEG_MIN_s1_translator:uav_lock
	wire  [31:0] sseg_min_s1_agent_m0_writedata;                                                       // SSEG_MIN_s1_agent:m0_writedata -> SSEG_MIN_s1_translator:uav_writedata
	wire         sseg_min_s1_agent_m0_write;                                                           // SSEG_MIN_s1_agent:m0_write -> SSEG_MIN_s1_translator:uav_write
	wire   [2:0] sseg_min_s1_agent_m0_burstcount;                                                      // SSEG_MIN_s1_agent:m0_burstcount -> SSEG_MIN_s1_translator:uav_burstcount
	wire         sseg_min_s1_agent_rf_source_valid;                                                    // SSEG_MIN_s1_agent:rf_source_valid -> SSEG_MIN_s1_agent_rsp_fifo:in_valid
	wire  [92:0] sseg_min_s1_agent_rf_source_data;                                                     // SSEG_MIN_s1_agent:rf_source_data -> SSEG_MIN_s1_agent_rsp_fifo:in_data
	wire         sseg_min_s1_agent_rf_source_ready;                                                    // SSEG_MIN_s1_agent_rsp_fifo:in_ready -> SSEG_MIN_s1_agent:rf_source_ready
	wire         sseg_min_s1_agent_rf_source_startofpacket;                                            // SSEG_MIN_s1_agent:rf_source_startofpacket -> SSEG_MIN_s1_agent_rsp_fifo:in_startofpacket
	wire         sseg_min_s1_agent_rf_source_endofpacket;                                              // SSEG_MIN_s1_agent:rf_source_endofpacket -> SSEG_MIN_s1_agent_rsp_fifo:in_endofpacket
	wire         sseg_min_s1_agent_rsp_fifo_out_valid;                                                 // SSEG_MIN_s1_agent_rsp_fifo:out_valid -> SSEG_MIN_s1_agent:rf_sink_valid
	wire  [92:0] sseg_min_s1_agent_rsp_fifo_out_data;                                                  // SSEG_MIN_s1_agent_rsp_fifo:out_data -> SSEG_MIN_s1_agent:rf_sink_data
	wire         sseg_min_s1_agent_rsp_fifo_out_ready;                                                 // SSEG_MIN_s1_agent:rf_sink_ready -> SSEG_MIN_s1_agent_rsp_fifo:out_ready
	wire         sseg_min_s1_agent_rsp_fifo_out_startofpacket;                                         // SSEG_MIN_s1_agent_rsp_fifo:out_startofpacket -> SSEG_MIN_s1_agent:rf_sink_startofpacket
	wire         sseg_min_s1_agent_rsp_fifo_out_endofpacket;                                           // SSEG_MIN_s1_agent_rsp_fifo:out_endofpacket -> SSEG_MIN_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                                // cmd_mux_005:src_valid -> SSEG_MIN_s1_agent:cp_valid
	wire  [91:0] cmd_mux_005_src_data;                                                                 // cmd_mux_005:src_data -> SSEG_MIN_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                                // SSEG_MIN_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [9:0] cmd_mux_005_src_channel;                                                              // cmd_mux_005:src_channel -> SSEG_MIN_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                        // cmd_mux_005:src_startofpacket -> SSEG_MIN_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                          // cmd_mux_005:src_endofpacket -> SSEG_MIN_s1_agent:cp_endofpacket
	wire  [31:0] sseg_sec_s1_agent_m0_readdata;                                                        // SSEG_SEC_s1_translator:uav_readdata -> SSEG_SEC_s1_agent:m0_readdata
	wire         sseg_sec_s1_agent_m0_waitrequest;                                                     // SSEG_SEC_s1_translator:uav_waitrequest -> SSEG_SEC_s1_agent:m0_waitrequest
	wire         sseg_sec_s1_agent_m0_debugaccess;                                                     // SSEG_SEC_s1_agent:m0_debugaccess -> SSEG_SEC_s1_translator:uav_debugaccess
	wire  [13:0] sseg_sec_s1_agent_m0_address;                                                         // SSEG_SEC_s1_agent:m0_address -> SSEG_SEC_s1_translator:uav_address
	wire   [3:0] sseg_sec_s1_agent_m0_byteenable;                                                      // SSEG_SEC_s1_agent:m0_byteenable -> SSEG_SEC_s1_translator:uav_byteenable
	wire         sseg_sec_s1_agent_m0_read;                                                            // SSEG_SEC_s1_agent:m0_read -> SSEG_SEC_s1_translator:uav_read
	wire         sseg_sec_s1_agent_m0_readdatavalid;                                                   // SSEG_SEC_s1_translator:uav_readdatavalid -> SSEG_SEC_s1_agent:m0_readdatavalid
	wire         sseg_sec_s1_agent_m0_lock;                                                            // SSEG_SEC_s1_agent:m0_lock -> SSEG_SEC_s1_translator:uav_lock
	wire  [31:0] sseg_sec_s1_agent_m0_writedata;                                                       // SSEG_SEC_s1_agent:m0_writedata -> SSEG_SEC_s1_translator:uav_writedata
	wire         sseg_sec_s1_agent_m0_write;                                                           // SSEG_SEC_s1_agent:m0_write -> SSEG_SEC_s1_translator:uav_write
	wire   [2:0] sseg_sec_s1_agent_m0_burstcount;                                                      // SSEG_SEC_s1_agent:m0_burstcount -> SSEG_SEC_s1_translator:uav_burstcount
	wire         sseg_sec_s1_agent_rf_source_valid;                                                    // SSEG_SEC_s1_agent:rf_source_valid -> SSEG_SEC_s1_agent_rsp_fifo:in_valid
	wire  [92:0] sseg_sec_s1_agent_rf_source_data;                                                     // SSEG_SEC_s1_agent:rf_source_data -> SSEG_SEC_s1_agent_rsp_fifo:in_data
	wire         sseg_sec_s1_agent_rf_source_ready;                                                    // SSEG_SEC_s1_agent_rsp_fifo:in_ready -> SSEG_SEC_s1_agent:rf_source_ready
	wire         sseg_sec_s1_agent_rf_source_startofpacket;                                            // SSEG_SEC_s1_agent:rf_source_startofpacket -> SSEG_SEC_s1_agent_rsp_fifo:in_startofpacket
	wire         sseg_sec_s1_agent_rf_source_endofpacket;                                              // SSEG_SEC_s1_agent:rf_source_endofpacket -> SSEG_SEC_s1_agent_rsp_fifo:in_endofpacket
	wire         sseg_sec_s1_agent_rsp_fifo_out_valid;                                                 // SSEG_SEC_s1_agent_rsp_fifo:out_valid -> SSEG_SEC_s1_agent:rf_sink_valid
	wire  [92:0] sseg_sec_s1_agent_rsp_fifo_out_data;                                                  // SSEG_SEC_s1_agent_rsp_fifo:out_data -> SSEG_SEC_s1_agent:rf_sink_data
	wire         sseg_sec_s1_agent_rsp_fifo_out_ready;                                                 // SSEG_SEC_s1_agent:rf_sink_ready -> SSEG_SEC_s1_agent_rsp_fifo:out_ready
	wire         sseg_sec_s1_agent_rsp_fifo_out_startofpacket;                                         // SSEG_SEC_s1_agent_rsp_fifo:out_startofpacket -> SSEG_SEC_s1_agent:rf_sink_startofpacket
	wire         sseg_sec_s1_agent_rsp_fifo_out_endofpacket;                                           // SSEG_SEC_s1_agent_rsp_fifo:out_endofpacket -> SSEG_SEC_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                                // cmd_mux_006:src_valid -> SSEG_SEC_s1_agent:cp_valid
	wire  [91:0] cmd_mux_006_src_data;                                                                 // cmd_mux_006:src_data -> SSEG_SEC_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                                // SSEG_SEC_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [9:0] cmd_mux_006_src_channel;                                                              // cmd_mux_006:src_channel -> SSEG_SEC_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                        // cmd_mux_006:src_startofpacket -> SSEG_SEC_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                          // cmd_mux_006:src_endofpacket -> SSEG_SEC_s1_agent:cp_endofpacket
	wire  [31:0] switch_s1_agent_m0_readdata;                                                          // SWITCH_s1_translator:uav_readdata -> SWITCH_s1_agent:m0_readdata
	wire         switch_s1_agent_m0_waitrequest;                                                       // SWITCH_s1_translator:uav_waitrequest -> SWITCH_s1_agent:m0_waitrequest
	wire         switch_s1_agent_m0_debugaccess;                                                       // SWITCH_s1_agent:m0_debugaccess -> SWITCH_s1_translator:uav_debugaccess
	wire  [13:0] switch_s1_agent_m0_address;                                                           // SWITCH_s1_agent:m0_address -> SWITCH_s1_translator:uav_address
	wire   [3:0] switch_s1_agent_m0_byteenable;                                                        // SWITCH_s1_agent:m0_byteenable -> SWITCH_s1_translator:uav_byteenable
	wire         switch_s1_agent_m0_read;                                                              // SWITCH_s1_agent:m0_read -> SWITCH_s1_translator:uav_read
	wire         switch_s1_agent_m0_readdatavalid;                                                     // SWITCH_s1_translator:uav_readdatavalid -> SWITCH_s1_agent:m0_readdatavalid
	wire         switch_s1_agent_m0_lock;                                                              // SWITCH_s1_agent:m0_lock -> SWITCH_s1_translator:uav_lock
	wire  [31:0] switch_s1_agent_m0_writedata;                                                         // SWITCH_s1_agent:m0_writedata -> SWITCH_s1_translator:uav_writedata
	wire         switch_s1_agent_m0_write;                                                             // SWITCH_s1_agent:m0_write -> SWITCH_s1_translator:uav_write
	wire   [2:0] switch_s1_agent_m0_burstcount;                                                        // SWITCH_s1_agent:m0_burstcount -> SWITCH_s1_translator:uav_burstcount
	wire         switch_s1_agent_rf_source_valid;                                                      // SWITCH_s1_agent:rf_source_valid -> SWITCH_s1_agent_rsp_fifo:in_valid
	wire  [92:0] switch_s1_agent_rf_source_data;                                                       // SWITCH_s1_agent:rf_source_data -> SWITCH_s1_agent_rsp_fifo:in_data
	wire         switch_s1_agent_rf_source_ready;                                                      // SWITCH_s1_agent_rsp_fifo:in_ready -> SWITCH_s1_agent:rf_source_ready
	wire         switch_s1_agent_rf_source_startofpacket;                                              // SWITCH_s1_agent:rf_source_startofpacket -> SWITCH_s1_agent_rsp_fifo:in_startofpacket
	wire         switch_s1_agent_rf_source_endofpacket;                                                // SWITCH_s1_agent:rf_source_endofpacket -> SWITCH_s1_agent_rsp_fifo:in_endofpacket
	wire         switch_s1_agent_rsp_fifo_out_valid;                                                   // SWITCH_s1_agent_rsp_fifo:out_valid -> SWITCH_s1_agent:rf_sink_valid
	wire  [92:0] switch_s1_agent_rsp_fifo_out_data;                                                    // SWITCH_s1_agent_rsp_fifo:out_data -> SWITCH_s1_agent:rf_sink_data
	wire         switch_s1_agent_rsp_fifo_out_ready;                                                   // SWITCH_s1_agent:rf_sink_ready -> SWITCH_s1_agent_rsp_fifo:out_ready
	wire         switch_s1_agent_rsp_fifo_out_startofpacket;                                           // SWITCH_s1_agent_rsp_fifo:out_startofpacket -> SWITCH_s1_agent:rf_sink_startofpacket
	wire         switch_s1_agent_rsp_fifo_out_endofpacket;                                             // SWITCH_s1_agent_rsp_fifo:out_endofpacket -> SWITCH_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                                // cmd_mux_007:src_valid -> SWITCH_s1_agent:cp_valid
	wire  [91:0] cmd_mux_007_src_data;                                                                 // cmd_mux_007:src_data -> SWITCH_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                                // SWITCH_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [9:0] cmd_mux_007_src_channel;                                                              // cmd_mux_007:src_channel -> SWITCH_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                        // cmd_mux_007:src_startofpacket -> SWITCH_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                          // cmd_mux_007:src_endofpacket -> SWITCH_s1_agent:cp_endofpacket
	wire  [31:0] buttons_s1_agent_m0_readdata;                                                         // BUTTONS_s1_translator:uav_readdata -> BUTTONS_s1_agent:m0_readdata
	wire         buttons_s1_agent_m0_waitrequest;                                                      // BUTTONS_s1_translator:uav_waitrequest -> BUTTONS_s1_agent:m0_waitrequest
	wire         buttons_s1_agent_m0_debugaccess;                                                      // BUTTONS_s1_agent:m0_debugaccess -> BUTTONS_s1_translator:uav_debugaccess
	wire  [13:0] buttons_s1_agent_m0_address;                                                          // BUTTONS_s1_agent:m0_address -> BUTTONS_s1_translator:uav_address
	wire   [3:0] buttons_s1_agent_m0_byteenable;                                                       // BUTTONS_s1_agent:m0_byteenable -> BUTTONS_s1_translator:uav_byteenable
	wire         buttons_s1_agent_m0_read;                                                             // BUTTONS_s1_agent:m0_read -> BUTTONS_s1_translator:uav_read
	wire         buttons_s1_agent_m0_readdatavalid;                                                    // BUTTONS_s1_translator:uav_readdatavalid -> BUTTONS_s1_agent:m0_readdatavalid
	wire         buttons_s1_agent_m0_lock;                                                             // BUTTONS_s1_agent:m0_lock -> BUTTONS_s1_translator:uav_lock
	wire  [31:0] buttons_s1_agent_m0_writedata;                                                        // BUTTONS_s1_agent:m0_writedata -> BUTTONS_s1_translator:uav_writedata
	wire         buttons_s1_agent_m0_write;                                                            // BUTTONS_s1_agent:m0_write -> BUTTONS_s1_translator:uav_write
	wire   [2:0] buttons_s1_agent_m0_burstcount;                                                       // BUTTONS_s1_agent:m0_burstcount -> BUTTONS_s1_translator:uav_burstcount
	wire         buttons_s1_agent_rf_source_valid;                                                     // BUTTONS_s1_agent:rf_source_valid -> BUTTONS_s1_agent_rsp_fifo:in_valid
	wire  [92:0] buttons_s1_agent_rf_source_data;                                                      // BUTTONS_s1_agent:rf_source_data -> BUTTONS_s1_agent_rsp_fifo:in_data
	wire         buttons_s1_agent_rf_source_ready;                                                     // BUTTONS_s1_agent_rsp_fifo:in_ready -> BUTTONS_s1_agent:rf_source_ready
	wire         buttons_s1_agent_rf_source_startofpacket;                                             // BUTTONS_s1_agent:rf_source_startofpacket -> BUTTONS_s1_agent_rsp_fifo:in_startofpacket
	wire         buttons_s1_agent_rf_source_endofpacket;                                               // BUTTONS_s1_agent:rf_source_endofpacket -> BUTTONS_s1_agent_rsp_fifo:in_endofpacket
	wire         buttons_s1_agent_rsp_fifo_out_valid;                                                  // BUTTONS_s1_agent_rsp_fifo:out_valid -> BUTTONS_s1_agent:rf_sink_valid
	wire  [92:0] buttons_s1_agent_rsp_fifo_out_data;                                                   // BUTTONS_s1_agent_rsp_fifo:out_data -> BUTTONS_s1_agent:rf_sink_data
	wire         buttons_s1_agent_rsp_fifo_out_ready;                                                  // BUTTONS_s1_agent:rf_sink_ready -> BUTTONS_s1_agent_rsp_fifo:out_ready
	wire         buttons_s1_agent_rsp_fifo_out_startofpacket;                                          // BUTTONS_s1_agent_rsp_fifo:out_startofpacket -> BUTTONS_s1_agent:rf_sink_startofpacket
	wire         buttons_s1_agent_rsp_fifo_out_endofpacket;                                            // BUTTONS_s1_agent_rsp_fifo:out_endofpacket -> BUTTONS_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                                // cmd_mux_008:src_valid -> BUTTONS_s1_agent:cp_valid
	wire  [91:0] cmd_mux_008_src_data;                                                                 // cmd_mux_008:src_data -> BUTTONS_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                                // BUTTONS_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [9:0] cmd_mux_008_src_channel;                                                              // cmd_mux_008:src_channel -> BUTTONS_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                                        // cmd_mux_008:src_startofpacket -> BUTTONS_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                                          // cmd_mux_008:src_endofpacket -> BUTTONS_s1_agent:cp_endofpacket
	wire  [31:0] timer_0_s1_agent_m0_readdata;                                                         // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire         timer_0_s1_agent_m0_waitrequest;                                                      // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire         timer_0_s1_agent_m0_debugaccess;                                                      // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire  [13:0] timer_0_s1_agent_m0_address;                                                          // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire   [3:0] timer_0_s1_agent_m0_byteenable;                                                       // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire         timer_0_s1_agent_m0_read;                                                             // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire         timer_0_s1_agent_m0_readdatavalid;                                                    // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire         timer_0_s1_agent_m0_lock;                                                             // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire  [31:0] timer_0_s1_agent_m0_writedata;                                                        // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire         timer_0_s1_agent_m0_write;                                                            // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire   [2:0] timer_0_s1_agent_m0_burstcount;                                                       // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire         timer_0_s1_agent_rf_source_valid;                                                     // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [92:0] timer_0_s1_agent_rf_source_data;                                                      // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire         timer_0_s1_agent_rf_source_ready;                                                     // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire         timer_0_s1_agent_rf_source_startofpacket;                                             // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire         timer_0_s1_agent_rf_source_endofpacket;                                               // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_valid;                                                  // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [92:0] timer_0_s1_agent_rsp_fifo_out_data;                                                   // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire         timer_0_s1_agent_rsp_fifo_out_ready;                                                  // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire         timer_0_s1_agent_rsp_fifo_out_startofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire         timer_0_s1_agent_rsp_fifo_out_endofpacket;                                            // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                                // cmd_mux_009:src_valid -> timer_0_s1_agent:cp_valid
	wire  [91:0] cmd_mux_009_src_data;                                                                 // cmd_mux_009:src_data -> timer_0_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                                // timer_0_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [9:0] cmd_mux_009_src_channel;                                                              // cmd_mux_009:src_channel -> timer_0_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                                        // cmd_mux_009:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                                          // cmd_mux_009:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire         timerwithclock_data_master_agent_cp_valid;                                            // TimerWithClock_data_master_agent:cp_valid -> router:sink_valid
	wire  [91:0] timerwithclock_data_master_agent_cp_data;                                             // TimerWithClock_data_master_agent:cp_data -> router:sink_data
	wire         timerwithclock_data_master_agent_cp_ready;                                            // router:sink_ready -> TimerWithClock_data_master_agent:cp_ready
	wire         timerwithclock_data_master_agent_cp_startofpacket;                                    // TimerWithClock_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         timerwithclock_data_master_agent_cp_endofpacket;                                      // TimerWithClock_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                     // router:src_valid -> cmd_demux:sink_valid
	wire  [91:0] router_src_data;                                                                      // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                     // cmd_demux:sink_ready -> router:src_ready
	wire   [9:0] router_src_channel;                                                                   // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                             // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                               // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         timerwithclock_instruction_master_agent_cp_valid;                                     // TimerWithClock_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [91:0] timerwithclock_instruction_master_agent_cp_data;                                      // TimerWithClock_instruction_master_agent:cp_data -> router_001:sink_data
	wire         timerwithclock_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> TimerWithClock_instruction_master_agent:cp_ready
	wire         timerwithclock_instruction_master_agent_cp_startofpacket;                             // TimerWithClock_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         timerwithclock_instruction_master_agent_cp_endofpacket;                               // TimerWithClock_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                                 // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [91:0] router_001_src_data;                                                                  // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                                 // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [9:0] router_001_src_channel;                                                               // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                         // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                           // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         debug_avalon_jtag_slave_agent_rp_valid;                                               // DEBUG_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [91:0] debug_avalon_jtag_slave_agent_rp_data;                                                // DEBUG_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire         debug_avalon_jtag_slave_agent_rp_ready;                                               // router_002:sink_ready -> DEBUG_avalon_jtag_slave_agent:rp_ready
	wire         debug_avalon_jtag_slave_agent_rp_startofpacket;                                       // DEBUG_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         debug_avalon_jtag_slave_agent_rp_endofpacket;                                         // DEBUG_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                                 // router_002:src_valid -> rsp_demux:sink_valid
	wire  [91:0] router_002_src_data;                                                                  // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                                 // rsp_demux:sink_ready -> router_002:src_ready
	wire   [9:0] router_002_src_channel;                                                               // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                         // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                           // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         timerwithclock_debug_mem_slave_agent_rp_valid;                                        // TimerWithClock_debug_mem_slave_agent:rp_valid -> router_003:sink_valid
	wire  [91:0] timerwithclock_debug_mem_slave_agent_rp_data;                                         // TimerWithClock_debug_mem_slave_agent:rp_data -> router_003:sink_data
	wire         timerwithclock_debug_mem_slave_agent_rp_ready;                                        // router_003:sink_ready -> TimerWithClock_debug_mem_slave_agent:rp_ready
	wire         timerwithclock_debug_mem_slave_agent_rp_startofpacket;                                // TimerWithClock_debug_mem_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         timerwithclock_debug_mem_slave_agent_rp_endofpacket;                                  // TimerWithClock_debug_mem_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                                 // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [91:0] router_003_src_data;                                                                  // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                                 // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [9:0] router_003_src_channel;                                                               // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                         // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                           // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         sram_s1_agent_rp_valid;                                                               // SRAM_s1_agent:rp_valid -> router_004:sink_valid
	wire  [91:0] sram_s1_agent_rp_data;                                                                // SRAM_s1_agent:rp_data -> router_004:sink_data
	wire         sram_s1_agent_rp_ready;                                                               // router_004:sink_ready -> SRAM_s1_agent:rp_ready
	wire         sram_s1_agent_rp_startofpacket;                                                       // SRAM_s1_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         sram_s1_agent_rp_endofpacket;                                                         // SRAM_s1_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                                 // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [91:0] router_004_src_data;                                                                  // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                                 // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [9:0] router_004_src_channel;                                                               // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                         // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                           // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         led_s1_agent_rp_valid;                                                                // LED_s1_agent:rp_valid -> router_005:sink_valid
	wire  [91:0] led_s1_agent_rp_data;                                                                 // LED_s1_agent:rp_data -> router_005:sink_data
	wire         led_s1_agent_rp_ready;                                                                // router_005:sink_ready -> LED_s1_agent:rp_ready
	wire         led_s1_agent_rp_startofpacket;                                                        // LED_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         led_s1_agent_rp_endofpacket;                                                          // LED_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                                 // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [91:0] router_005_src_data;                                                                  // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                                 // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [9:0] router_005_src_channel;                                                               // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                         // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                           // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         sseg_hour_s1_agent_rp_valid;                                                          // SSEG_HOUR_s1_agent:rp_valid -> router_006:sink_valid
	wire  [91:0] sseg_hour_s1_agent_rp_data;                                                           // SSEG_HOUR_s1_agent:rp_data -> router_006:sink_data
	wire         sseg_hour_s1_agent_rp_ready;                                                          // router_006:sink_ready -> SSEG_HOUR_s1_agent:rp_ready
	wire         sseg_hour_s1_agent_rp_startofpacket;                                                  // SSEG_HOUR_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         sseg_hour_s1_agent_rp_endofpacket;                                                    // SSEG_HOUR_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                                 // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [91:0] router_006_src_data;                                                                  // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                                 // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [9:0] router_006_src_channel;                                                               // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                         // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                           // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         sseg_min_s1_agent_rp_valid;                                                           // SSEG_MIN_s1_agent:rp_valid -> router_007:sink_valid
	wire  [91:0] sseg_min_s1_agent_rp_data;                                                            // SSEG_MIN_s1_agent:rp_data -> router_007:sink_data
	wire         sseg_min_s1_agent_rp_ready;                                                           // router_007:sink_ready -> SSEG_MIN_s1_agent:rp_ready
	wire         sseg_min_s1_agent_rp_startofpacket;                                                   // SSEG_MIN_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         sseg_min_s1_agent_rp_endofpacket;                                                     // SSEG_MIN_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                                 // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [91:0] router_007_src_data;                                                                  // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                                 // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [9:0] router_007_src_channel;                                                               // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                         // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                           // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         sseg_sec_s1_agent_rp_valid;                                                           // SSEG_SEC_s1_agent:rp_valid -> router_008:sink_valid
	wire  [91:0] sseg_sec_s1_agent_rp_data;                                                            // SSEG_SEC_s1_agent:rp_data -> router_008:sink_data
	wire         sseg_sec_s1_agent_rp_ready;                                                           // router_008:sink_ready -> SSEG_SEC_s1_agent:rp_ready
	wire         sseg_sec_s1_agent_rp_startofpacket;                                                   // SSEG_SEC_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         sseg_sec_s1_agent_rp_endofpacket;                                                     // SSEG_SEC_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                                 // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [91:0] router_008_src_data;                                                                  // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                                 // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [9:0] router_008_src_channel;                                                               // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                         // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                           // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         switch_s1_agent_rp_valid;                                                             // SWITCH_s1_agent:rp_valid -> router_009:sink_valid
	wire  [91:0] switch_s1_agent_rp_data;                                                              // SWITCH_s1_agent:rp_data -> router_009:sink_data
	wire         switch_s1_agent_rp_ready;                                                             // router_009:sink_ready -> SWITCH_s1_agent:rp_ready
	wire         switch_s1_agent_rp_startofpacket;                                                     // SWITCH_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         switch_s1_agent_rp_endofpacket;                                                       // SWITCH_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                                 // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [91:0] router_009_src_data;                                                                  // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                                 // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [9:0] router_009_src_channel;                                                               // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                         // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                           // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         buttons_s1_agent_rp_valid;                                                            // BUTTONS_s1_agent:rp_valid -> router_010:sink_valid
	wire  [91:0] buttons_s1_agent_rp_data;                                                             // BUTTONS_s1_agent:rp_data -> router_010:sink_data
	wire         buttons_s1_agent_rp_ready;                                                            // router_010:sink_ready -> BUTTONS_s1_agent:rp_ready
	wire         buttons_s1_agent_rp_startofpacket;                                                    // BUTTONS_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         buttons_s1_agent_rp_endofpacket;                                                      // BUTTONS_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                                 // router_010:src_valid -> rsp_demux_008:sink_valid
	wire  [91:0] router_010_src_data;                                                                  // router_010:src_data -> rsp_demux_008:sink_data
	wire         router_010_src_ready;                                                                 // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [9:0] router_010_src_channel;                                                               // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_startofpacket;                                                         // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_010_src_endofpacket;                                                           // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         timer_0_s1_agent_rp_valid;                                                            // timer_0_s1_agent:rp_valid -> router_011:sink_valid
	wire  [91:0] timer_0_s1_agent_rp_data;                                                             // timer_0_s1_agent:rp_data -> router_011:sink_data
	wire         timer_0_s1_agent_rp_ready;                                                            // router_011:sink_ready -> timer_0_s1_agent:rp_ready
	wire         timer_0_s1_agent_rp_startofpacket;                                                    // timer_0_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         timer_0_s1_agent_rp_endofpacket;                                                      // timer_0_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                                 // router_011:src_valid -> rsp_demux_009:sink_valid
	wire  [91:0] router_011_src_data;                                                                  // router_011:src_data -> rsp_demux_009:sink_data
	wire         router_011_src_ready;                                                                 // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [9:0] router_011_src_channel;                                                               // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_startofpacket;                                                         // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_011_src_endofpacket;                                                           // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [91:0] cmd_demux_src0_data;                                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [9:0] cmd_demux_src0_channel;                                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [91:0] cmd_demux_src1_data;                                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [9:0] cmd_demux_src1_channel;                                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [91:0] cmd_demux_src2_data;                                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [9:0] cmd_demux_src2_channel;                                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                                 // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [91:0] cmd_demux_src3_data;                                                                  // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                                 // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [9:0] cmd_demux_src3_channel;                                                               // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                         // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                           // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                                 // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [91:0] cmd_demux_src4_data;                                                                  // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                                 // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [9:0] cmd_demux_src4_channel;                                                               // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                                         // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                           // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                                 // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [91:0] cmd_demux_src5_data;                                                                  // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                                 // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [9:0] cmd_demux_src5_channel;                                                               // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                                         // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                           // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                                 // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [91:0] cmd_demux_src6_data;                                                                  // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                                 // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [9:0] cmd_demux_src6_channel;                                                               // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                                         // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                           // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                                 // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [91:0] cmd_demux_src7_data;                                                                  // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                                 // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [9:0] cmd_demux_src7_channel;                                                               // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                                         // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                           // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                                 // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [91:0] cmd_demux_src8_data;                                                                  // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                                 // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [9:0] cmd_demux_src8_channel;                                                               // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                                         // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                                           // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                                 // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [91:0] cmd_demux_src9_data;                                                                  // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                                 // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [9:0] cmd_demux_src9_channel;                                                               // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                                         // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                                           // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                             // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire  [91:0] cmd_demux_001_src0_data;                                                              // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire         cmd_demux_001_src0_ready;                                                             // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire   [9:0] cmd_demux_001_src0_channel;                                                           // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                                     // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                       // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                             // cmd_demux_001:src1_valid -> cmd_mux_002:sink1_valid
	wire  [91:0] cmd_demux_001_src1_data;                                                              // cmd_demux_001:src1_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src1_ready;                                                             // cmd_mux_002:sink1_ready -> cmd_demux_001:src1_ready
	wire   [9:0] cmd_demux_001_src1_channel;                                                           // cmd_demux_001:src1_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                                     // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                       // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [91:0] rsp_demux_src0_data;                                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [9:0] rsp_demux_src0_channel;                                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [91:0] rsp_demux_001_src0_data;                                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [9:0] rsp_demux_001_src0_channel;                                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src1_valid;                                                             // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire  [91:0] rsp_demux_001_src1_data;                                                              // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_001_src1_ready;                                                             // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire   [9:0] rsp_demux_001_src1_channel;                                                           // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_001_src1_startofpacket;                                                     // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_001_src1_endofpacket;                                                       // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_002_src0_valid;                                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [91:0] rsp_demux_002_src0_data;                                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [9:0] rsp_demux_002_src0_channel;                                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                             // rsp_demux_002:src1_valid -> rsp_mux_001:sink1_valid
	wire  [91:0] rsp_demux_002_src1_data;                                                              // rsp_demux_002:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_002_src1_ready;                                                             // rsp_mux_001:sink1_ready -> rsp_demux_002:src1_ready
	wire   [9:0] rsp_demux_002_src1_channel;                                                           // rsp_demux_002:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_002_src1_startofpacket;                                                     // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                                       // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_003_src0_valid;                                                             // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [91:0] rsp_demux_003_src0_data;                                                              // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                             // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [9:0] rsp_demux_003_src0_channel;                                                           // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                                     // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                       // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                             // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [91:0] rsp_demux_004_src0_data;                                                              // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                             // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [9:0] rsp_demux_004_src0_channel;                                                           // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                                     // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                       // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                             // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [91:0] rsp_demux_005_src0_data;                                                              // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                             // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [9:0] rsp_demux_005_src0_channel;                                                           // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                                     // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                       // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                             // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [91:0] rsp_demux_006_src0_data;                                                              // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                             // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [9:0] rsp_demux_006_src0_channel;                                                           // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                                     // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                       // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                             // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [91:0] rsp_demux_007_src0_data;                                                              // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                             // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [9:0] rsp_demux_007_src0_channel;                                                           // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                                     // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                       // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                             // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [91:0] rsp_demux_008_src0_data;                                                              // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                             // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [9:0] rsp_demux_008_src0_channel;                                                           // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                                     // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                                       // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                             // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [91:0] rsp_demux_009_src0_data;                                                              // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                             // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [9:0] rsp_demux_009_src0_channel;                                                           // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                                     // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                                       // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         debug_avalon_jtag_slave_agent_rdata_fifo_src_valid;                                   // DEBUG_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] debug_avalon_jtag_slave_agent_rdata_fifo_src_data;                                    // DEBUG_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         debug_avalon_jtag_slave_agent_rdata_fifo_src_ready;                                   // avalon_st_adapter:in_0_ready -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                        // avalon_st_adapter:out_0_valid -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                         // avalon_st_adapter:out_0_data -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                        // DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                        // avalon_st_adapter:out_0_error -> DEBUG_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         timerwithclock_debug_mem_slave_agent_rdata_fifo_src_valid;                            // TimerWithClock_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] timerwithclock_debug_mem_slave_agent_rdata_fifo_src_data;                             // TimerWithClock_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         timerwithclock_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_001:in_0_ready -> TimerWithClock_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                                    // avalon_st_adapter_001:out_0_valid -> TimerWithClock_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                                     // avalon_st_adapter_001:out_0_data -> TimerWithClock_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                                    // TimerWithClock_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                                    // avalon_st_adapter_001:out_0_error -> TimerWithClock_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         sram_s1_agent_rdata_fifo_src_valid;                                                   // SRAM_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] sram_s1_agent_rdata_fifo_src_data;                                                    // SRAM_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         sram_s1_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_002:in_0_ready -> SRAM_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                                    // avalon_st_adapter_002:out_0_valid -> SRAM_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                                     // avalon_st_adapter_002:out_0_data -> SRAM_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                                    // SRAM_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                                    // avalon_st_adapter_002:out_0_error -> SRAM_s1_agent:rdata_fifo_sink_error
	wire         led_s1_agent_rdata_fifo_src_valid;                                                    // LED_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] led_s1_agent_rdata_fifo_src_data;                                                     // LED_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         led_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_003:in_0_ready -> LED_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                                    // avalon_st_adapter_003:out_0_valid -> LED_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                                     // avalon_st_adapter_003:out_0_data -> LED_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                                    // LED_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                                    // avalon_st_adapter_003:out_0_error -> LED_s1_agent:rdata_fifo_sink_error
	wire         sseg_hour_s1_agent_rdata_fifo_src_valid;                                              // SSEG_HOUR_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] sseg_hour_s1_agent_rdata_fifo_src_data;                                               // SSEG_HOUR_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         sseg_hour_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_004:in_0_ready -> SSEG_HOUR_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                                    // avalon_st_adapter_004:out_0_valid -> SSEG_HOUR_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                                     // avalon_st_adapter_004:out_0_data -> SSEG_HOUR_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                                    // SSEG_HOUR_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                                    // avalon_st_adapter_004:out_0_error -> SSEG_HOUR_s1_agent:rdata_fifo_sink_error
	wire         sseg_min_s1_agent_rdata_fifo_src_valid;                                               // SSEG_MIN_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] sseg_min_s1_agent_rdata_fifo_src_data;                                                // SSEG_MIN_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         sseg_min_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_005:in_0_ready -> SSEG_MIN_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                                    // avalon_st_adapter_005:out_0_valid -> SSEG_MIN_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                                     // avalon_st_adapter_005:out_0_data -> SSEG_MIN_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                                    // SSEG_MIN_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                                    // avalon_st_adapter_005:out_0_error -> SSEG_MIN_s1_agent:rdata_fifo_sink_error
	wire         sseg_sec_s1_agent_rdata_fifo_src_valid;                                               // SSEG_SEC_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] sseg_sec_s1_agent_rdata_fifo_src_data;                                                // SSEG_SEC_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         sseg_sec_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_006:in_0_ready -> SSEG_SEC_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                                    // avalon_st_adapter_006:out_0_valid -> SSEG_SEC_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                                     // avalon_st_adapter_006:out_0_data -> SSEG_SEC_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                                    // SSEG_SEC_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                                    // avalon_st_adapter_006:out_0_error -> SSEG_SEC_s1_agent:rdata_fifo_sink_error
	wire         switch_s1_agent_rdata_fifo_src_valid;                                                 // SWITCH_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] switch_s1_agent_rdata_fifo_src_data;                                                  // SWITCH_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         switch_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_007:in_0_ready -> SWITCH_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                                    // avalon_st_adapter_007:out_0_valid -> SWITCH_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                                     // avalon_st_adapter_007:out_0_data -> SWITCH_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                                    // SWITCH_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                                    // avalon_st_adapter_007:out_0_error -> SWITCH_s1_agent:rdata_fifo_sink_error
	wire         buttons_s1_agent_rdata_fifo_src_valid;                                                // BUTTONS_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] buttons_s1_agent_rdata_fifo_src_data;                                                 // BUTTONS_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         buttons_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_008:in_0_ready -> BUTTONS_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                                    // avalon_st_adapter_008:out_0_valid -> BUTTONS_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                                     // avalon_st_adapter_008:out_0_data -> BUTTONS_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                                    // BUTTONS_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                                    // avalon_st_adapter_008:out_0_error -> BUTTONS_s1_agent:rdata_fifo_sink_error
	wire         timer_0_s1_agent_rdata_fifo_src_valid;                                                // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                                 // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         timer_0_s1_agent_rdata_fifo_src_ready;                                                // avalon_st_adapter_009:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                                    // avalon_st_adapter_009:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                                     // avalon_st_adapter_009:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                                    // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                                    // avalon_st_adapter_009:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) timerwithclock_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                                 //                       clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (timerwithclock_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (timerwithclock_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (timerwithclock_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (timerwithclock_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (timerwithclock_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (timerwithclock_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (timerwithclock_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (timerwithclock_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (timerwithclock_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (timerwithclock_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (timerwithclock_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (TimerWithClock_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (TimerWithClock_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (TimerWithClock_data_master_byteenable),                                         //                          .byteenable
		.av_read                (TimerWithClock_data_master_read),                                               //                          .read
		.av_readdata            (TimerWithClock_data_master_readdata),                                           //                          .readdata
		.av_write               (TimerWithClock_data_master_write),                                              //                          .write
		.av_writedata           (TimerWithClock_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (TimerWithClock_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_readdatavalid       (),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (14),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (14),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) timerwithclock_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                        //                       clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (timerwithclock_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (timerwithclock_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (timerwithclock_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (timerwithclock_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (timerwithclock_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (timerwithclock_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (timerwithclock_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (timerwithclock_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (timerwithclock_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (timerwithclock_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (timerwithclock_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (TimerWithClock_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (TimerWithClock_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (TimerWithClock_instruction_master_read),                                               //                          .read
		.av_readdata            (TimerWithClock_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_byteenable          (4'b1111),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_readdatavalid       (),                                                                                     //               (terminated)
		.av_write               (1'b0),                                                                                 //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                 //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) debug_avalon_jtag_slave_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (debug_avalon_jtag_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (debug_avalon_jtag_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (debug_avalon_jtag_slave_agent_m0_read),            //                         .read
		.uav_write              (debug_avalon_jtag_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (debug_avalon_jtag_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (debug_avalon_jtag_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (debug_avalon_jtag_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (debug_avalon_jtag_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (debug_avalon_jtag_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (debug_avalon_jtag_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (debug_avalon_jtag_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (DEBUG_avalon_jtag_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (DEBUG_avalon_jtag_slave_write),                    //                         .write
		.av_read                (DEBUG_avalon_jtag_slave_read),                     //                         .read
		.av_readdata            (DEBUG_avalon_jtag_slave_readdata),                 //                         .readdata
		.av_writedata           (DEBUG_avalon_jtag_slave_writedata),                //                         .writedata
		.av_waitrequest         (DEBUG_avalon_jtag_slave_waitrequest),              //                         .waitrequest
		.av_chipselect          (DEBUG_avalon_jtag_slave_chipselect),               //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timerwithclock_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                         //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (timerwithclock_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (timerwithclock_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (timerwithclock_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (timerwithclock_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (timerwithclock_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (timerwithclock_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (timerwithclock_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (timerwithclock_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (timerwithclock_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (timerwithclock_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (timerwithclock_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (TimerWithClock_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (TimerWithClock_debug_mem_slave_write),                  //                         .write
		.av_read                (TimerWithClock_debug_mem_slave_read),                   //                         .read
		.av_readdata            (TimerWithClock_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (TimerWithClock_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (TimerWithClock_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (TimerWithClock_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (TimerWithClock_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (10),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_s1_translator (
		.clk                    (clk_0_clk_clk),                           //                      clk.clk
		.reset                  (SRAM_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (sram_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (sram_s1_agent_m0_read),                   //                         .read
		.uav_write              (sram_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest        (sram_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (sram_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (sram_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (sram_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (sram_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock               (sram_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (sram_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (SRAM_s1_address),                         //      avalon_anti_slave_0.address
		.av_write               (SRAM_s1_write),                           //                         .write
		.av_readdata            (SRAM_s1_readdata),                        //                         .readdata
		.av_writedata           (SRAM_s1_writedata),                       //                         .writedata
		.av_byteenable          (SRAM_s1_byteenable),                      //                         .byteenable
		.av_chipselect          (SRAM_s1_chipselect),                      //                         .chipselect
		.av_clken               (SRAM_s1_clken),                           //                         .clken
		.av_read                (),                                        //              (terminated)
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_burstcount          (),                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                    //              (terminated)
		.av_waitrequest         (1'b0),                                    //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                             //                         .read
		.uav_write              (led_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (LED_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (LED_s1_write),                                     //                         .write
		.av_readdata            (LED_s1_readdata),                                  //                         .readdata
		.av_writedata           (LED_s1_writedata),                                 //                         .writedata
		.av_chipselect          (LED_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sseg_hour_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sseg_hour_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sseg_hour_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sseg_hour_s1_agent_m0_read),                       //                         .read
		.uav_write              (sseg_hour_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sseg_hour_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sseg_hour_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sseg_hour_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sseg_hour_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sseg_hour_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sseg_hour_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sseg_hour_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (SSEG_HOUR_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (SSEG_HOUR_s1_write),                               //                         .write
		.av_readdata            (SSEG_HOUR_s1_readdata),                            //                         .readdata
		.av_writedata           (SSEG_HOUR_s1_writedata),                           //                         .writedata
		.av_chipselect          (SSEG_HOUR_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sseg_min_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sseg_min_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (sseg_min_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (sseg_min_s1_agent_m0_read),                        //                         .read
		.uav_write              (sseg_min_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (sseg_min_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (sseg_min_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (sseg_min_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (sseg_min_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (sseg_min_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (sseg_min_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (sseg_min_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (SSEG_MIN_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (SSEG_MIN_s1_write),                                //                         .write
		.av_readdata            (SSEG_MIN_s1_readdata),                             //                         .readdata
		.av_writedata           (SSEG_MIN_s1_writedata),                            //                         .writedata
		.av_chipselect          (SSEG_MIN_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sseg_sec_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sseg_sec_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (sseg_sec_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (sseg_sec_s1_agent_m0_read),                        //                         .read
		.uav_write              (sseg_sec_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (sseg_sec_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (sseg_sec_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (sseg_sec_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (sseg_sec_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (sseg_sec_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (sseg_sec_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (sseg_sec_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (SSEG_SEC_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (SSEG_SEC_s1_write),                                //                         .write
		.av_readdata            (SSEG_SEC_s1_readdata),                             //                         .readdata
		.av_writedata           (SSEG_SEC_s1_writedata),                            //                         .writedata
		.av_chipselect          (SSEG_SEC_s1_chipselect),                           //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) switch_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (switch_s1_agent_m0_address),                       // avalon_universal_slave_0.address
		.uav_burstcount         (switch_s1_agent_m0_burstcount),                    //                         .burstcount
		.uav_read               (switch_s1_agent_m0_read),                          //                         .read
		.uav_write              (switch_s1_agent_m0_write),                         //                         .write
		.uav_waitrequest        (switch_s1_agent_m0_waitrequest),                   //                         .waitrequest
		.uav_readdatavalid      (switch_s1_agent_m0_readdatavalid),                 //                         .readdatavalid
		.uav_byteenable         (switch_s1_agent_m0_byteenable),                    //                         .byteenable
		.uav_readdata           (switch_s1_agent_m0_readdata),                      //                         .readdata
		.uav_writedata          (switch_s1_agent_m0_writedata),                     //                         .writedata
		.uav_lock               (switch_s1_agent_m0_lock),                          //                         .lock
		.uav_debugaccess        (switch_s1_agent_m0_debugaccess),                   //                         .debugaccess
		.av_address             (SWITCH_s1_address),                                //      avalon_anti_slave_0.address
		.av_readdata            (SWITCH_s1_readdata),                               //                         .readdata
		.av_write               (),                                                 //              (terminated)
		.av_read                (),                                                 //              (terminated)
		.av_writedata           (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) buttons_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (buttons_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (buttons_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (buttons_s1_agent_m0_read),                         //                         .read
		.uav_write              (buttons_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (buttons_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (buttons_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (buttons_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (buttons_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (buttons_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (buttons_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (buttons_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (BUTTONS_s1_address),                               //      avalon_anti_slave_0.address
		.av_readdata            (BUTTONS_s1_readdata),                              //                         .readdata
		.av_write               (),                                                 //              (terminated)
		.av_read                (),                                                 //              (terminated)
		.av_writedata           (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (14),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                    //                      clk.clk
		.reset                  (TimerWithClock_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                         //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (timer_0_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                                 //                         .write
		.av_readdata            (timer_0_s1_readdata),                              //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                             //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) timerwithclock_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                                 //       clk.clk
		.reset                 (TimerWithClock_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (timerwithclock_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (timerwithclock_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (timerwithclock_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (timerwithclock_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (timerwithclock_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (timerwithclock_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (timerwithclock_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (timerwithclock_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (timerwithclock_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (timerwithclock_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (timerwithclock_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (timerwithclock_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (timerwithclock_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (timerwithclock_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (timerwithclock_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (timerwithclock_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                             //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                              //          .data
		.rp_channel            (rsp_mux_src_channel),                                                           //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                       //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                             //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (86),
		.PKT_CACHE_L               (83),
		.PKT_THREAD_ID_H           (79),
		.PKT_THREAD_ID_L           (79),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (55),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.ST_DATA_W                 (92),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) timerwithclock_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                        //       clk.clk
		.reset                 (TimerWithClock_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (timerwithclock_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (timerwithclock_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (timerwithclock_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (timerwithclock_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (timerwithclock_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (timerwithclock_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (timerwithclock_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (timerwithclock_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (timerwithclock_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (timerwithclock_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (timerwithclock_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (timerwithclock_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (timerwithclock_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (timerwithclock_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (timerwithclock_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (timerwithclock_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) debug_avalon_jtag_slave_agent (
		.clk                     (clk_0_clk_clk),                                            //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (debug_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (debug_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (debug_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (debug_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (debug_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (debug_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (debug_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (debug_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (debug_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (debug_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (debug_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (debug_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (debug_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (debug_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (debug_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (debug_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                      //                .channel
		.rf_sink_ready           (debug_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (debug_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (debug_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (debug_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (debug_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (debug_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (debug_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (debug_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (debug_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (debug_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (debug_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (debug_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (debug_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) debug_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                            //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (debug_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (debug_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (debug_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (debug_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (debug_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (debug_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (debug_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (debug_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (debug_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (debug_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timerwithclock_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (timerwithclock_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (timerwithclock_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (timerwithclock_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (timerwithclock_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (timerwithclock_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (timerwithclock_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (timerwithclock_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (timerwithclock_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (timerwithclock_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (timerwithclock_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (timerwithclock_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (timerwithclock_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (timerwithclock_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (timerwithclock_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (timerwithclock_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (timerwithclock_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                         //                .channel
		.rf_sink_ready           (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (timerwithclock_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (timerwithclock_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (timerwithclock_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (timerwithclock_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (timerwithclock_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (timerwithclock_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timerwithclock_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (timerwithclock_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timerwithclock_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (timerwithclock_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (timerwithclock_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (timerwithclock_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (timerwithclock_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (timerwithclock_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (timerwithclock_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_s1_agent (
		.clk                     (clk_0_clk_clk),                            //             clk.clk
		.reset                   (SRAM_reset1_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sram_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                    //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                    //                .valid
		.cp_data                 (cmd_mux_002_src_data),                     //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),            //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),              //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                  //                .channel
		.rf_sink_ready           (sram_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),        //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),         //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),        //                .error
		.rdata_fifo_src_ready    (sram_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                            //       clk.clk
		.reset             (SRAM_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (sram_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sram_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                    // (terminated)
		.csr_read          (1'b0),                                     // (terminated)
		.csr_write         (1'b0),                                     // (terminated)
		.csr_readdata      (),                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),     // (terminated)
		.almost_full_data  (),                                         // (terminated)
		.almost_empty_data (),                                         // (terminated)
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_error         (),                                         // (terminated)
		.in_channel        (1'b0),                                     // (terminated)
		.out_channel       ()                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (led_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (led_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_003_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                          //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sseg_hour_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sseg_hour_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sseg_hour_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sseg_hour_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sseg_hour_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sseg_hour_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sseg_hour_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sseg_hour_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sseg_hour_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sseg_hour_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sseg_hour_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sseg_hour_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sseg_hour_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sseg_hour_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sseg_hour_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sseg_hour_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sseg_hour_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_004_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                          //                .channel
		.rf_sink_ready           (sseg_hour_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sseg_hour_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sseg_hour_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sseg_hour_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sseg_hour_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sseg_hour_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sseg_hour_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sseg_hour_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sseg_hour_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sseg_hour_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sseg_hour_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sseg_hour_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sseg_hour_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sseg_hour_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sseg_hour_s1_agent_rf_source_data),                //        in.data
		.in_valid          (sseg_hour_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (sseg_hour_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sseg_hour_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sseg_hour_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sseg_hour_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sseg_hour_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sseg_hour_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sseg_hour_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sseg_hour_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sseg_min_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sseg_min_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (sseg_min_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (sseg_min_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (sseg_min_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (sseg_min_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (sseg_min_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (sseg_min_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (sseg_min_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (sseg_min_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (sseg_min_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (sseg_min_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (sseg_min_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (sseg_min_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (sseg_min_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (sseg_min_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (sseg_min_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_005_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                          //                .channel
		.rf_sink_ready           (sseg_min_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (sseg_min_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (sseg_min_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (sseg_min_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (sseg_min_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (sseg_min_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (sseg_min_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (sseg_min_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (sseg_min_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (sseg_min_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sseg_min_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sseg_min_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (sseg_min_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sseg_min_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sseg_min_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (sseg_min_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (sseg_min_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (sseg_min_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (sseg_min_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (sseg_min_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (sseg_min_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (sseg_min_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (sseg_min_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (sseg_min_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sseg_sec_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sseg_sec_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (sseg_sec_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (sseg_sec_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (sseg_sec_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (sseg_sec_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (sseg_sec_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (sseg_sec_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (sseg_sec_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (sseg_sec_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (sseg_sec_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (sseg_sec_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (sseg_sec_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (sseg_sec_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (sseg_sec_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (sseg_sec_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (sseg_sec_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_006_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                          //                .channel
		.rf_sink_ready           (sseg_sec_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (sseg_sec_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (sseg_sec_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (sseg_sec_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (sseg_sec_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (sseg_sec_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (sseg_sec_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (sseg_sec_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (sseg_sec_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (sseg_sec_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sseg_sec_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sseg_sec_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (sseg_sec_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sseg_sec_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sseg_sec_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (sseg_sec_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (sseg_sec_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (sseg_sec_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (sseg_sec_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (sseg_sec_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (sseg_sec_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (sseg_sec_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (sseg_sec_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (sseg_sec_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) switch_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (switch_s1_agent_m0_address),                       //              m0.address
		.m0_burstcount           (switch_s1_agent_m0_burstcount),                    //                .burstcount
		.m0_byteenable           (switch_s1_agent_m0_byteenable),                    //                .byteenable
		.m0_debugaccess          (switch_s1_agent_m0_debugaccess),                   //                .debugaccess
		.m0_lock                 (switch_s1_agent_m0_lock),                          //                .lock
		.m0_readdata             (switch_s1_agent_m0_readdata),                      //                .readdata
		.m0_readdatavalid        (switch_s1_agent_m0_readdatavalid),                 //                .readdatavalid
		.m0_read                 (switch_s1_agent_m0_read),                          //                .read
		.m0_waitrequest          (switch_s1_agent_m0_waitrequest),                   //                .waitrequest
		.m0_writedata            (switch_s1_agent_m0_writedata),                     //                .writedata
		.m0_write                (switch_s1_agent_m0_write),                         //                .write
		.rp_endofpacket          (switch_s1_agent_rp_endofpacket),                   //              rp.endofpacket
		.rp_ready                (switch_s1_agent_rp_ready),                         //                .ready
		.rp_valid                (switch_s1_agent_rp_valid),                         //                .valid
		.rp_data                 (switch_s1_agent_rp_data),                          //                .data
		.rp_startofpacket        (switch_s1_agent_rp_startofpacket),                 //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_007_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                          //                .channel
		.rf_sink_ready           (switch_s1_agent_rsp_fifo_out_ready),               //         rf_sink.ready
		.rf_sink_valid           (switch_s1_agent_rsp_fifo_out_valid),               //                .valid
		.rf_sink_startofpacket   (switch_s1_agent_rsp_fifo_out_startofpacket),       //                .startofpacket
		.rf_sink_endofpacket     (switch_s1_agent_rsp_fifo_out_endofpacket),         //                .endofpacket
		.rf_sink_data            (switch_s1_agent_rsp_fifo_out_data),                //                .data
		.rf_source_ready         (switch_s1_agent_rf_source_ready),                  //       rf_source.ready
		.rf_source_valid         (switch_s1_agent_rf_source_valid),                  //                .valid
		.rf_source_startofpacket (switch_s1_agent_rf_source_startofpacket),          //                .startofpacket
		.rf_source_endofpacket   (switch_s1_agent_rf_source_endofpacket),            //                .endofpacket
		.rf_source_data          (switch_s1_agent_rf_source_data),                   //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                //                .error
		.rdata_fifo_src_ready    (switch_s1_agent_rdata_fifo_src_ready),             //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (switch_s1_agent_rdata_fifo_src_valid),             //                .valid
		.rdata_fifo_src_data     (switch_s1_agent_rdata_fifo_src_data),              //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) switch_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (switch_s1_agent_rf_source_data),                   //        in.data
		.in_valid          (switch_s1_agent_rf_source_valid),                  //          .valid
		.in_ready          (switch_s1_agent_rf_source_ready),                  //          .ready
		.in_startofpacket  (switch_s1_agent_rf_source_startofpacket),          //          .startofpacket
		.in_endofpacket    (switch_s1_agent_rf_source_endofpacket),            //          .endofpacket
		.out_data          (switch_s1_agent_rsp_fifo_out_data),                //       out.data
		.out_valid         (switch_s1_agent_rsp_fifo_out_valid),               //          .valid
		.out_ready         (switch_s1_agent_rsp_fifo_out_ready),               //          .ready
		.out_startofpacket (switch_s1_agent_rsp_fifo_out_startofpacket),       //          .startofpacket
		.out_endofpacket   (switch_s1_agent_rsp_fifo_out_endofpacket),         //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) buttons_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (buttons_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (buttons_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (buttons_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (buttons_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (buttons_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (buttons_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (buttons_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (buttons_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (buttons_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (buttons_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (buttons_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (buttons_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (buttons_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (buttons_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (buttons_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (buttons_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_008_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                          //                .channel
		.rf_sink_ready           (buttons_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (buttons_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (buttons_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (buttons_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (buttons_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (buttons_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (buttons_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (buttons_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (buttons_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (buttons_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                //                .error
		.rdata_fifo_src_ready    (buttons_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (buttons_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (buttons_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) buttons_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (buttons_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (buttons_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (buttons_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (buttons_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (buttons_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (buttons_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (buttons_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (buttons_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (buttons_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (buttons_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (91),
		.PKT_ORI_BURST_SIZE_L      (89),
		.PKT_RESPONSE_STATUS_H     (88),
		.PKT_RESPONSE_STATUS_L     (87),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (82),
		.PKT_PROTECTION_L          (80),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (74),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (78),
		.PKT_DEST_ID_L             (75),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (92),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                    //             clk.clk
		.reset                   (TimerWithClock_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_009_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                          //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (93),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                    //       clk.clk
		.reset             (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	TimerWithClock_mm_interconnect_0_router router (
		.sink_ready         (timerwithclock_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (timerwithclock_data_master_agent_cp_valid),         //          .valid
		.sink_data          (timerwithclock_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (timerwithclock_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (timerwithclock_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                  //       src.ready
		.src_valid          (router_src_valid),                                  //          .valid
		.src_data           (router_src_data),                                   //          .data
		.src_channel        (router_src_channel),                                //          .channel
		.src_startofpacket  (router_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                             //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (timerwithclock_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (timerwithclock_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (timerwithclock_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (timerwithclock_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (timerwithclock_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                            //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                     //       src.ready
		.src_valid          (router_001_src_valid),                                     //          .valid
		.src_data           (router_001_src_data),                                      //          .data
		.src_channel        (router_001_src_channel),                                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (debug_avalon_jtag_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (debug_avalon_jtag_slave_agent_rp_valid),           //          .valid
		.sink_data          (debug_avalon_jtag_slave_agent_rp_data),            //          .data
		.sink_startofpacket (debug_avalon_jtag_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (debug_avalon_jtag_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (timerwithclock_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (timerwithclock_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (timerwithclock_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (timerwithclock_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (timerwithclock_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_003_src_ready),                                  //       src.ready
		.src_valid          (router_003_src_valid),                                  //          .valid
		.src_data           (router_003_src_data),                                   //          .data
		.src_channel        (router_003_src_channel),                                //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                             //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_003 router_004 (
		.sink_ready         (sram_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (sram_s1_agent_rp_valid),                  //          .valid
		.sink_data          (sram_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (sram_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (sram_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                    //       src.ready
		.src_valid          (router_004_src_valid),                    //          .valid
		.src_data           (router_004_src_data),                     //          .data
		.src_channel        (router_004_src_channel),                  //          .channel
		.src_startofpacket  (router_004_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)               //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (led_s1_agent_rp_ready),                            //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                            //          .valid
		.sink_data          (led_s1_agent_rp_data),                             //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (sseg_hour_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sseg_hour_s1_agent_rp_valid),                      //          .valid
		.sink_data          (sseg_hour_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (sseg_hour_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sseg_hour_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (sseg_min_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (sseg_min_s1_agent_rp_valid),                       //          .valid
		.sink_data          (sseg_min_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (sseg_min_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (sseg_min_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (sseg_sec_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (sseg_sec_s1_agent_rp_valid),                       //          .valid
		.sink_data          (sseg_sec_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (sseg_sec_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (sseg_sec_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                             //       src.ready
		.src_valid          (router_008_src_valid),                             //          .valid
		.src_data           (router_008_src_data),                              //          .data
		.src_channel        (router_008_src_channel),                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (switch_s1_agent_rp_ready),                         //      sink.ready
		.sink_valid         (switch_s1_agent_rp_valid),                         //          .valid
		.sink_data          (switch_s1_agent_rp_data),                          //          .data
		.sink_startofpacket (switch_s1_agent_rp_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (switch_s1_agent_rp_endofpacket),                   //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                             //       src.ready
		.src_valid          (router_009_src_valid),                             //          .valid
		.src_data           (router_009_src_data),                              //          .data
		.src_channel        (router_009_src_channel),                           //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_010 (
		.sink_ready         (buttons_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (buttons_s1_agent_rp_valid),                        //          .valid
		.sink_data          (buttons_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (buttons_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (buttons_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                             //       src.ready
		.src_valid          (router_010_src_valid),                             //          .valid
		.src_data           (router_010_src_data),                              //          .data
		.src_channel        (router_010_src_channel),                           //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_router_002 router_011 (
		.sink_ready         (timer_0_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (timer_0_s1_agent_rp_valid),                        //          .valid
		.sink_data          (timer_0_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (timer_0_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (timer_0_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                             //       src.ready
		.src_valid          (router_011_src_valid),                             //          .valid
		.src_data           (router_011_src_data),                              //          .data
		.src_channel        (router_011_src_channel),                           //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                 //      sink.ready
		.sink_channel       (router_src_channel),                               //          .channel
		.sink_data          (router_src_data),                                  //          .data
		.sink_startofpacket (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_src_valid),                                 //          .valid
		.src0_ready         (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                             //          .valid
		.src0_data          (cmd_demux_src0_data),                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                             //          .valid
		.src1_data          (cmd_demux_src1_data),                              //          .data
		.src1_channel       (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                             //          .valid
		.src2_data          (cmd_demux_src2_data),                              //          .data
		.src2_channel       (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                             //          .valid
		.src3_data          (cmd_demux_src3_data),                              //          .data
		.src3_channel       (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                             //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                             //          .valid
		.src4_data          (cmd_demux_src4_data),                              //          .data
		.src4_channel       (cmd_demux_src4_channel),                           //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                             //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                             //          .valid
		.src5_data          (cmd_demux_src5_data),                              //          .data
		.src5_channel       (cmd_demux_src5_channel),                           //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                             //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                             //          .valid
		.src6_data          (cmd_demux_src6_data),                              //          .data
		.src6_channel       (cmd_demux_src6_channel),                           //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                             //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                             //          .valid
		.src7_data          (cmd_demux_src7_data),                              //          .data
		.src7_channel       (cmd_demux_src7_channel),                           //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.src8_ready         (cmd_demux_src8_ready),                             //      src8.ready
		.src8_valid         (cmd_demux_src8_valid),                             //          .valid
		.src8_data          (cmd_demux_src8_data),                              //          .data
		.src8_channel       (cmd_demux_src8_channel),                           //          .channel
		.src8_startofpacket (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.src8_endofpacket   (cmd_demux_src8_endofpacket),                       //          .endofpacket
		.src9_ready         (cmd_demux_src9_ready),                             //      src9.ready
		.src9_valid         (cmd_demux_src9_valid),                             //          .valid
		.src9_data          (cmd_demux_src9_data),                              //          .data
		.src9_channel       (cmd_demux_src9_channel),                           //          .channel
		.src9_startofpacket (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.src9_endofpacket   (cmd_demux_src9_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_001_src1_data),                          //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                           //          .channel
		.sink0_data          (cmd_demux_src1_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                           //       clk.clk
		.reset               (SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                  //          .channel
		.sink0_data          (cmd_demux_src2_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)           //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                            //          .valid
		.src_data            (cmd_mux_005_src_data),                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                           //          .channel
		.sink0_data          (cmd_demux_src5_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                            //          .valid
		.src_data            (cmd_mux_006_src_data),                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                           //          .channel
		.sink0_data          (cmd_demux_src6_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                            //          .valid
		.src_data            (cmd_mux_007_src_data),                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                            //          .valid
		.src_data            (cmd_mux_008_src_data),                             //          .data
		.src_channel         (cmd_mux_008_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                           //          .channel
		.sink0_data          (cmd_demux_src8_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                            //          .valid
		.src_data            (cmd_mux_009_src_data),                             //          .data
		.src_channel         (cmd_mux_009_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                           //          .channel
		.sink0_data          (cmd_demux_src9_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //      sink.ready
		.sink_channel       (router_003_src_channel),                           //          .channel
		.sink_data          (router_003_src_data),                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_001_src1_data),                          //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_cmd_demux_001 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                           //       clk.clk
		.reset              (SRAM_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                    //      sink.ready
		.sink_channel       (router_004_src_channel),                  //          .channel
		.sink_data          (router_004_src_data),                     //          .data
		.sink_startofpacket (router_004_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_004_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                //          .valid
		.src1_data          (rsp_demux_002_src1_data),                 //          .data
		.src1_channel       (rsp_demux_002_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)           //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                             //      sink.ready
		.sink_channel       (router_008_src_channel),                           //          .channel
		.sink_data          (router_008_src_data),                              //          .data
		.sink_startofpacket (router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_008_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                             //      sink.ready
		.sink_channel       (router_009_src_channel),                           //          .channel
		.sink_data          (router_009_src_data),                              //          .data
		.sink_startofpacket (router_009_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_009_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                             //      sink.ready
		.sink_channel       (router_010_src_channel),                           //          .channel
		.sink_data          (router_010_src_data),                              //          .data
		.sink_startofpacket (router_010_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_010_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_008_src0_data),                          //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                    //       clk.clk
		.reset              (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                             //      sink.ready
		.sink_channel       (router_011_src_channel),                           //          .channel
		.sink_data          (router_011_src_data),                              //          .data
		.sink_startofpacket (router_011_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_011_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_009_src0_data),                          //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                //          .valid
		.src_data            (rsp_mux_src_data),                                 //          .data
		.src_channel         (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                           //          .channel
		.sink0_data          (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                          //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                         //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                          //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                         //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                          //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                   //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                         //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                          //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket),                   //          .endofpacket
		.sink7_ready         (rsp_demux_007_src0_ready),                         //     sink7.ready
		.sink7_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.sink7_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.sink7_data          (rsp_demux_007_src0_data),                          //          .data
		.sink7_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.sink7_endofpacket   (rsp_demux_007_src0_endofpacket),                   //          .endofpacket
		.sink8_ready         (rsp_demux_008_src0_ready),                         //     sink8.ready
		.sink8_valid         (rsp_demux_008_src0_valid),                         //          .valid
		.sink8_channel       (rsp_demux_008_src0_channel),                       //          .channel
		.sink8_data          (rsp_demux_008_src0_data),                          //          .data
		.sink8_startofpacket (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.sink8_endofpacket   (rsp_demux_008_src0_endofpacket),                   //          .endofpacket
		.sink9_ready         (rsp_demux_009_src0_ready),                         //     sink9.ready
		.sink9_valid         (rsp_demux_009_src0_valid),                         //          .valid
		.sink9_channel       (rsp_demux_009_src0_channel),                       //          .channel
		.sink9_data          (rsp_demux_009_src0_data),                          //          .data
		.sink9_startofpacket (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.sink9_endofpacket   (rsp_demux_009_src0_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                    //       clk.clk
		.reset               (TimerWithClock_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_002_src1_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_002_src1_valid),                         //          .valid
		.sink1_channel       (rsp_demux_002_src1_channel),                       //          .channel
		.sink1_data          (rsp_demux_002_src1_data),                          //          .data
		.sink1_startofpacket (rsp_demux_002_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_002_src1_endofpacket)                    //          .endofpacket
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (debug_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (debug_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (debug_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                       //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (timerwithclock_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (timerwithclock_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (timerwithclock_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                          //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (SRAM_reset1_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_s1_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (sram_s1_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (sram_s1_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)        //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sseg_hour_s1_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sseg_hour_s1_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sseg_hour_s1_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                 //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sseg_min_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (sseg_min_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (sseg_min_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                 //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sseg_sec_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (sseg_sec_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (sseg_sec_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                 //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (switch_s1_agent_rdata_fifo_src_data),              //     in_0.data
		.in_0_valid     (switch_s1_agent_rdata_fifo_src_valid),             //         .valid
		.in_0_ready     (switch_s1_agent_rdata_fifo_src_ready),             //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                 //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (buttons_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (buttons_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (buttons_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                 //         .error
	);

	TimerWithClock_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (TimerWithClock_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                 //         .error
	);

endmodule
