#include "display.h"

// Función para convertir un número en un patrón de display de 7 segmentos
uint8_t num_to_seven_seg(int num) {
    // Patrones invertidos para un display de ánodo común
    static const uint8_t patterns[10] = {
        0x3F, // 0
        0x06, // 1
        0x5B, // 2
        0x4F, // 3
        0x66, // 4
        0x6D, // 5
        0x7D, // 6
        0x07, // 7
        0x7F, // 8
        0x6F  // 9
    };

    return ~patterns[num];  // Invertir los bits
}

// Función para mostrar el tiempo en los displays
void display_time(const Clock *clock) {
    // Horas, minutos y segundos a mostrar
    int hours_tens = clock->hours / 10;
    int hours_units = clock->hours % 10;
    int minutes_tens = clock->minutes / 10;
    int minutes_units = clock->minutes % 10;
    int seconds_tens = clock->seconds / 10;
    int seconds_units = clock->seconds % 10;

    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_HOUR_TENS_BASE, num_to_seven_seg(hours_tens));
    IOWR_ALTERA_ALVALON_PIO_DATA(SSEG_HOUR_UNITS_BASE, num_to_seven_seg(hours_units));
    IOWR_ALTERA_ALVALON_PIO_DATA(SSEG_MINS_TENS_BASE, num_to_seven_seg(minutes_tens));
    IOWR_ALTERA_ALVALON_PIO_DATA(SSEG_MIN_UNITS_BASE, num_to_seven_seg(minutes_units));
    IOWR_ALTERA_ALVALON_PIO_DATA(SSEG_SEC_TENS_BASE, num_to_seven_seg(seconds_tens));
    IOWR_ALTERA_ALVALON_PIO_DATA(SSEG_SEC_UNITS_BASE, num_to_seven_seg(seconds_units));
}
