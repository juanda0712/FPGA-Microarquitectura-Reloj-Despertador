#include <altera_avalon_timer_regs.h>
#include <altera_avalon_pio_regs.h>
#include <stdio.h>

#define TIMER_BASE 0x3000 // Base address for the timer (debes ajustar esta dirección)
#define PIO_BASE 0x00000010    // Base address for the PIO (debes ajustar esta dirección)
#define LEDS_BASE 0x30a0  // Base address for the LED display (debes ajustar esta dirección)
#define BOTON_MODIFICAR 0x3050 // Botón para modificar horas, minutos y segundos
#define SWITCH_ENCENDER_LEDS 0x3020  // Switch para encender/apagar la pantalla de LEDs

int main() {
    // Inicializar el temporizador
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x00);

    // Definir las variables para almacenar la hora, los minutos y los segundos
    int hora = 0;
    int minuto = 0;
    int segundo = 0;
    int estado_modificar = 0;
    int leds_encendidos = 0;

    while (1) {
        // Leer los botones y el switch
        int botones = IORD_ALTERA_AVALON_PIO_DATA(PIO_BASE);

        // Controlar el encendido/apagado de los LEDs con el switch
        if (botones & SWITCH_ENCENDER_LEDS) {
            leds_encendidos = !leds_encendidos;  // Alternar el estado de los LEDs
            IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE, leds_encendidos ? 0xFF : 0x00);
            printf("LEDS %s\n", leds_encendidos ? "encendidos" : "apagados");
        }

        // Modificar horas, minutos o segundos dependiendo del estado
        if (botones & BOTON_MODIFICAR) {
            estado_modificar = (estado_modificar + 1) % 3; // Alternar entre horas, minutos y segundos
            printf("Estado modificar: %d\n", estado_modificar);
        }

        if (estado_modificar == 0 && (botones & BOTON_HORA_UP)) {
            hora++;
            if (hora > 23) hora = 0;
            printf("Hora up: %d\n", hora);
        }

        if (estado_modificar == 0 && (botones & BOTON_HORA_DOWN)) {
            hora--;
            if (hora < 0) hora = 23;
            printf("Hora down: %d\n", hora);
        }

        if (estado_modificar == 1 && (botones & BOTON_MINUTO_UP)) {
            minuto++;
            if (minuto > 59) minuto = 0;
            printf("Minuto up: %d\n", minuto);
        }

        if (estado_modificar == 1 && (botones & BOTON_MINUTO_DOWN)) {
            minuto--;
            if (minuto < 0) minuto = 59;
            printf("Minuto down: %d\n", minuto);
        }

        if (estado_modificar == 2 && (botones & BOTON_MINUTO_UP)) { // Reutiliza BOTON_MINUTO_UP para segundos
            segundo++;
            if (segundo > 59) segundo = 0;
            printf("Segundo up: %d\n", segundo);
        }

        if (estado_modificar == 2 && (botones & BOTON_MINUTO_DOWN)) { // Reutiliza BOTON_MINUTO_DOWN para segundos
            segundo--;
            if (segundo < 0) segundo = 59;
            printf("Segundo down: %d\n", segundo);
        }

        // Iniciar el temporizador
        if (botones & SWITCH_INICIAR) {
            IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x01);
            printf("Temporizador iniciado\n");
        }

        // Actualizar el temporizador
        int valor_actual = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);
        int nuevo_valor = valor_actual + 1;
        IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, nuevo_valor);
    }

    return 0;
}
