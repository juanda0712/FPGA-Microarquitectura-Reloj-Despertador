#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_timer_regs.h"
#include "sys/alt_irq.h"
#include "sys/alt_stdio.h"
#include "io.h"
#include "alt_types.h"

volatile int timer_flag = 0;

// Interrupt handler for the timer
void timer_isr(void* context, alt_u32 id) {
    // Clear the interrupt flag
    IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, 0);

    // Set the flag to indicate the timer expired
    timer_flag = 1;
}

int main() {
    // Register the ISR for the timer
    alt_irq_register(TIMER_IRQ, NULL, timer_isr);

    // Initialize the timer
    IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_BASE, 0x0003); // Start the timer and enable interrupts

    while (1) {
        if (timer_flag) {
            printf("Timer expired!\n");
            timer_flag = 0; // Reset the flag
        }
    }

    return 0;
}

