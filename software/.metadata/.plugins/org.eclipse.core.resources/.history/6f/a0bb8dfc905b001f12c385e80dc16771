#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_pio_regs.h"
#include "io.h"
#include "alt_types.h"

// Patrones de segmentos para los números del 0 al 9
static const alt_u8 SEGMENT_PATTERNS[10] = {
    0x3F, // 0
    0x06, // 1
    0x5B, // 2
    0x4F, // 3
    0x66, // 4
    0x6D, // 5
    0x7D, // 6
    0x07, // 7
    0x7F, // 8
    0x6F  // 9
};

// Convertir un valor a su patrón de 7 segmentos
alt_u8 value_to_7_segment_pattern(alt_u8 value) {
    return SEGMENT_PATTERNS[value % 10];
}

void display_time() {
    // Horas, minutos y segundos a mostrar
    alt_u8 hours_tens = hours / 10;
    alt_u8 hours_units = hours % 10;
    alt_u8 minutes_tens = minutes / 10;
    alt_u8 minutes_units = minutes % 10;
    alt_u8 seconds_tens = seconds / 10;
    alt_u8 seconds_units = seconds % 10;

    // Mostrar las horas
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_HOUR_BASE, (value_to_7_segment_pattern(hours_tens) << 8) | value_to_7_segment_pattern(hours_units));

    // Mostrar los minutos
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_MIN_BASE, (value_to_7_segment_pattern(minutes_tens) << 8) | value_to_7_segment_pattern(minutes_units));

    // Mostrar los segundos
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_SEC_BASE, (value_to_7_segment_pattern(seconds_tens) << 8) | value_to_7_segment_pattern(seconds_units));
}

int main() {
    // Inicializar el temporizador
    init_timer();

    while (1) {
        // Leer el estado del temporizador
        alt_u32 timer_status = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE);

        // Verificar si el temporizador ha generado una interrupción
        if (timer_status & ALTERA_AVALON_TIMER_STATUS_TO_MSK) {
            // Actualizar el reloj
            update_clock();

            // Mostrar el tiempo en los displays
            display_time();

            // Reiniciar el temporizador
            IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
        }
    }
    return 0;
}



