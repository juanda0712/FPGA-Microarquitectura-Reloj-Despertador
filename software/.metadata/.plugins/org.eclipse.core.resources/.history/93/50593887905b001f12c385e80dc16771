#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_timer_regs.h"
#include "altera_avalon_pio_regs.h"
#include "io.h"
#include "alt_types.h"

// Definiciones y variables globales
#define SECONDS_PER_MINUTE 60
#define MINUTES_PER_HOUR 60
#define HOURS_PER_DAY 24

alt_u32 seconds = 0;
alt_u32 minutes = 0;
alt_u32 hours = 0;

// Función para actualizar el reloj
void update_clock() {
    seconds++;
    if (seconds >= SECONDS_PER_MINUTE) {
        seconds = 0;
        minutes++;
        if (minutes >= MINUTES_PER_HOUR) {
            minutes = 0;
            hours++;
            if (hours >= HOURS_PER_DAY) {
                hours = 0;
            }
        }
    }
}

// Función para mostrar el tiempo en los displays de 7 segmentos
void display_time() {
    // Convertir las horas, minutos y segundos a formato adecuado para los displays
    // Asumiendo que tienes funciones para manejar los displays de 7 segmentos
    display_on_7_segment(SEGMENT_1, hours / 10); // Horas decenas
    display_on_7_segment(SEGMENT_2, hours % 10); // Horas unidades
    display_on_7_segment(SEGMENT_3, minutes / 10); // Minutos decenas
    display_on_7_segment(SEGMENT_4, minutes % 10); // Minutos unidades
    display_on_7_segment(SEGMENT_5, seconds / 10); // Segundos decenas
    display_on_7_segment(SEGMENT_6, seconds % 10); // Segundos unidades
}

int main() {
    // Inicializar el temporizador
    init_timer();

    while (1) {
        // Leer el estado del temporizador
        alt_u32 timer_status = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE);

        // Verificar si el temporizador ha generado una interrupción
        if (timer_status & ALTERA_AVALON_TIMER_STATUS_TO_MSK) {
            // Actualizar el reloj
            update_clock();

            // Mostrar el tiempo en los displays
            display_time();

            // Reiniciar el temporizador
            IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
        }
    }
    return 0;
}

