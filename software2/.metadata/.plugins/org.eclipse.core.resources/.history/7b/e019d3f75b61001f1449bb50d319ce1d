#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <stdint.h>
#include "io.h"
#include "alt_types.h"

// Variables globales para el tiempo
volatile int hours = 0;
volatile int minutes = 0;
volatile int seconds = 0;
volatile uint8_t selected_segment = 0; // 0: horas, 1: minutos, 2: segundos

// Mapa de segmentos para los números 0-9
uint8_t num_to_seven_seg(int num) {
    static const uint8_t patterns[10] = {
        0x3F, // 0
        0x06, // 1
        0x5B, // 2
        0x4F, // 3
        0x66, // 4
        0x6D, // 5
        0x7D, // 6
        0x07, // 7
        0x7F, // 8
        0x6F  // 9
    };
    return patterns[num];  // Retorna el patrón para el número dado
}

// Función para mostrar el tiempo en los displays de 7 segmentos
void display_time() {
    // Mostrar horas
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_HOUR_TENS_BASE, num_to_seven_seg(hours / 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_HOUR_UNITS_BASE, num_to_seven_seg(hours % 10));

    // Mostrar minutos
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_MINS_TENS_BASE, num_to_seven_seg(minutes / 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_MIN_UNITS_BASE, num_to_seven_seg(minutes % 10));

    // Mostrar segundos
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_SEC_TENS_BASE, num_to_seven_seg(seconds / 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_SEC_UNITS_BASE, num_to_seven_seg(seconds % 10));
}

// Función para manejar la lógica de botones
void handle_buttons() {
    uint32_t buttons_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);

    // Verifica cuál botón ha sido presionado
    if (buttons_state & 0x01) { // Botón 1: Selecciona horas
        selected_segment = 0;
    }
    if (buttons_state & 0x02) { // Botón 2: Selecciona minutos
        selected_segment = 1;
    }
    if (buttons_state & 0x04) { // Botón 3: Selecciona segundos
        selected_segment = 2;
    }
    if (buttons_state & 0x08) { // Botón 4: Incrementar el valor del segmento seleccionado
        switch (selected_segment) {
            case 0: // Incrementa horas
                hours++;
                if (hours >= 24) hours = 0;
                break;
            case 1: // Incrementa minutos
                minutes++;
                if (minutes >= 60) minutes = 0;
                break;
            case 2: // Incrementa segundos
                seconds++;
                if (seconds >= 60) seconds = 0;
                break;
        }
        display_time(); // Actualizar los displays después del cambio
    }
}

// Función para incrementar automáticamente el tiempo (simulando un reloj)
void update_time() {
    seconds++;
    if (seconds >= 60) {
        seconds = 0;
        minutes++;
        if (minutes >= 60) {
            minutes = 0;
            hours++;
            if (hours >= 24) {
                hours = 0;
            }
        }
    }
    display_time(); // Actualizar el tiempo en los displays
}

// Función de delay para simular el paso del tiempo
void delay(int millisec) {
    int count = millisec * 1000; // Ajusta este valor para tu sistema
    while (count > 0) {
        count--;
    }
}

// Función principal
int main() {
    // Inicializar los displays con el tiempo actual
    display_time();

    while (1) {
        // Manejar los botones
        handle_buttons();

        // Simular el paso de un segundo cada vez que se ejecuta la función de delay
        delay(1000);  // Simula un segundo de retraso
        update_time(); // Incrementar el tiempo cada segundo
    }
    return 0;
}


