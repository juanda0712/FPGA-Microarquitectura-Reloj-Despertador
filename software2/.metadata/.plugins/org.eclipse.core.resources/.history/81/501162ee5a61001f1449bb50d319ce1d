#include "sys/alt_stdio.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_timer_regs.h"
#include <stdint.h>
#include "io.h"
#include "alt_types.h"

// Variables globales para el tiempo
volatile int hours = 0;
volatile int minutes = 0;
volatile int seconds = 0;
volatile uint8_t selected_segment = 0; // 0: horas, 1: minutos, 2: segundos

uint8_t num_to_seven_seg(int num) {
    static const uint8_t patterns[10] = {
        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F
    };
    return patterns[num];  // Retorna el patrón para el número dado
}

// Función para actualizar el reloj
void update_clock() {
    seconds++;
    if (seconds >= 60) {
        seconds = 0;
        minutes++;
        if (minutes >= 60) {
            minutes = 0;
            hours++;
            if (hours >= 24) {
                hours = 0;
            }
        }
    }
}

// Función para actualizar los displays de 7 segmentos
void display_time() {
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_HOUR_TENS_BASE, num_to_seven_seg(hours / 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_HOUR_UNITS_BASE, num_to_seven_seg(hours % 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_MINS_TENS_BASE, num_to_seven_seg(minutes / 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_MIN_UNITS_BASE, num_to_seven_seg(minutes % 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_SEC_TENS_BASE, num_to_seven_seg(seconds / 10));
    IOWR_ALTERA_AVALON_PIO_DATA(SSEG_SEC_UNITS_BASE, num_to_seven_seg(seconds % 10));
}

// Función para manejar la lógica de botones
void handle_buttons() {
    uint32_t buttons_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);

    // Verifica cuál botón ha sido presionado
    if (buttons_state & 0x01) { // Botón 1: Selecciona horas
        selected_segment = 0;
    }
    if (buttons_state & 0x02) { // Botón 2: Selecciona minutos
        selected_segment = 1;
    }
    if (buttons_state & 0x04) { // Botón 3: Selecciona segundos
        selected_segment = 2;
    }
    if (buttons_state & 0x08) { // Botón 4: Incrementar el valor del segmento seleccionado
        switch (selected_segment) {
            case 0: // Incrementa horas
                hours++;
                if (hours >= 24) hours = 0;
                break;
            case 1: // Incrementa minutos
                minutes++;
                if (minutes >= 60) minutes = 0;
                break;
            case 2: // Incrementa segundos
                seconds++;
                if (seconds >= 60) seconds = 0;
                break;
        }
        display_time(); // Actualizar los displays después del cambio
    }
}

int main() {
    // Inicializa el temporizador
    init_timer();

    // Inicializa los displays
    display_time();

    while (1) {
        // Leer el estado del temporizador
        alt_u32 timer_status = IORD_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE);

        // Verificar si el temporizador ha generado una interrupción
        if (timer_status & ALTERA_AVALON_TIMER_STATUS_TO_MSK) {
            // Actualizar el reloj automáticamente
            update_clock();
            display_time();

            // Reiniciar el temporizador
            IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_BASE, ALTERA_AVALON_TIMER_STATUS_TO_MSK);
        }

        // Manejar los botones (sincrónico, pero puede hacerse por interrupciones)
        handle_buttons();
    }
    return 0;
}
