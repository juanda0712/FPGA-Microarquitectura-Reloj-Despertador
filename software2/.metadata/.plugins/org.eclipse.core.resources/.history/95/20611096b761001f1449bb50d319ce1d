#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <stdint.h>

#define BUTTONS_BASE 0x3050 // Dirección base de los botones
#define LEDS_BASE 0x30a0 // Dirección base de los LEDs
#define SSEG_HOUR_TENS_BASE 0x3030 // Dirección base de los segmentos LED de horas (decenas)
#define SSEG_HOUR_UNITS_BASE 0x3090 // Dirección base de los segmentos LED de horas (unidades)
#define SSEG_MINS_TENS_BASE 0x3060 // Dirección base de los segmentos LED de minutos (decenas)
#define SSEG_MIN_UNITS_BASE 0x3080 // Dirección base de los segmentos LED de minutos (unidades)
#define SSEG_SEC_TENS_BASE 0x3040 // Dirección base de los segmentos LED de segundos (decenas)
#define SSEG_SEC_UNITS_BASE 0x3070 // Dirección base de los segmentos LED de segundos (unidades)

// Variables para almacenar el tiempo
uint8_t horas = 0, minutos = 0, segundos = 0;

// Mapa de segmentos para los dígitos 0-9
uint8_t num_to_seven_seg(int num) {
    static const uint8_t patterns[10] = {
        0x3F, // 0
        0x06, // 1
        0x5B, // 2
        0x4F, // 3
        0x66, // 4
        0x6D, // 5
        0x7D, // 6
        0x07, // 7
        0x7F, // 8
        0x6F  // 9
    };

    return ~patterns[num]; // Invertir si los LEDs son comunes al cátodo
}

// Función para mostrar un dígito en los segmentos LED
void display_digit(uint32_t sseg_base, uint8_t digit) {
    if (digit < 10) {
        IOWR_ALTERA_AVALON_PIO_DATA(sseg_base, num_to_seven_seg(digit));
    }
}

// Función para actualizar los segmentos LED correspondientes
void update_hours() {
    display_digit(SSEG_HOUR_TENS_BASE, horas / 10);
    display_digit(SSEG_HOUR_UNITS_BASE, horas % 10);
}

void update_minutes() {
    display_digit(SSEG_MINS_TENS_BASE, minutos / 10);
    display_digit(SSEG_MIN_UNITS_BASE, minutos % 10);
}

void update_seconds() {
    display_digit(SSEG_SEC_TENS_BASE, segundos / 10);
    display_digit(SSEG_SEC_UNITS_BASE, segundos % 10);
}

// Función para agregar debouncing de botones
uint32_t debounce_buttons() {
    uint32_t stable_state;
    uint32_t last_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    for (int i = 0; i < 10000; i++) { // Pequeño retraso para debouncing
        stable_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
        if (stable_state == last_state) {
            return stable_state;
        }
        last_state = stable_state;
    }
    return stable_state;
}

int main() {
    // Inicializa los LEDs como salida y botones como entrada
    IOWR_ALTERA_AVALON_PIO_DIRECTION(LEDS_BASE, 0xFF); // LEDs como salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(BUTTONS_BASE, 0x00); // Botones como entradas

    // Inicializa los segmentos LED como salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_HOUR_TENS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_HOUR_UNITS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_MINS_TENS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_MIN_UNITS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_SEC_TENS_BASE, 0xFF); // Salidas
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_SEC_UNITS_BASE, 0xFF); // Salidas

    uint32_t prev_buttons_state = debounce_buttons(); // Guarda el estado inicial de los botones

    // Actualiza los segmentos LED iniciales
    update_hours();
    update_minutes();
    update_seconds();

    while (1) {
        uint32_t buttons_state = debounce_buttons(); // Lee el estado de los botones con debouncing

        // Verifica si el estado del botón ha cambiado
        if (buttons_state != prev_buttons_state) {
            prev_buttons_state = buttons_state;

            // Verifica qué botón se ha presionado
            if (buttons_state & 0x01) { // Botón 1: Incrementar horas
                horas = (horas + 1) % 24; // Mantener en el rango 0-23
                update_hours(); // Actualiza solo los segmentos de horas
            }

            if (buttons_state & 0x02) { // Botón 2: Incrementar minutos
                minutos = (minutos + 1) % 60; // Mantener en el rango 0-59
                update_minutes(); // Actualiza solo los segmentos de minutos
            }

            if (buttons_state & 0x04) { // Botón 3: Incrementar segundos
                segundos = (segundos + 1) % 60; // Mantener en el rango 0-59
                update_seconds(); // Actualiza solo los segmentos de segundos
            }
        }
    }

    return 0;
}
