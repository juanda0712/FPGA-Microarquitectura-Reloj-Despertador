#include "system.h"
#include "altera_avalon_pio_regs.h"
#include <stdint.h>

#define BUTTONS_BASE 0x3050 // Dirección base de los botones
#define LEDS_BASE 0x30a0 // Dirección base de los LEDs
#define SSEG_HOUR_TENS_BASE 0x3030 // Dirección base de los segmentos LED de horas (decenas)
#define SSEG_HOUR_UNITS_BASE 0x3090 // Dirección base de los segmentos LED de horas (unidades)
#define SSEG_MINS_TENS_BASE 0x3060 // Dirección base de los segmentos LED de minutos (decenas)
#define SSEG_MIN_UNITS_BASE 0x3080 // Dirección base de los segmentos LED de minutos (unidades)
#define SSEG_SEC_TENS_BASE 0x3040 // Dirección base de los segmentos LED de segundos (decenas)
#define SSEG_SEC_UNITS_BASE 0x3070 // Dirección base de los segmentos LED de segundos (unidades)

// Variables para almacenar el tiempo
uint8_t horas = 0, minutos = 0, segundos = 0;
uint8_t selected_segment = 0; // 0: horas, 1: minutos, 2: segundos

// Mapa de segmentos para los dígitos 0-9
uint8_t num_to_seven_seg(int num) {
    static const uint8_t patterns[10] = {
        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F
    };
    return patterns[num];
}

// Función para mostrar un dígito en los segmentos LED
void display_digit(uint32_t sseg_base, uint8_t digit) {
    if (digit < 10) {
        IOWR_ALTERA_AVALON_PIO_DATA(sseg_base, num_to_seven_seg(digit));
    }
}

// Función para actualizar los segmentos LED
void update_segments() {
    display_digit(SSEG_HOUR_TENS_BASE, horas / 10);
    display_digit(SSEG_HOUR_UNITS_BASE, horas % 10);
    display_digit(SSEG_MINS_TENS_BASE, minutos / 10);
    display_digit(SSEG_MIN_UNITS_BASE, minutos % 10);
    display_digit(SSEG_SEC_TENS_BASE, segundos / 10);
    display_digit(SSEG_SEC_UNITS_BASE, segundos % 10);
}

// Función para agregar debouncing de botones
uint32_t debounce_buttons() {
    uint32_t current_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
    for (int i = 0; i < 10000; i++) {
        if (current_state != IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE)) {
            i = 0;
            current_state = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
        }
    }
    return current_state;
}

// Función para incrementar el tiempo automáticamente
void auto_increment_time() {
    segundos++;
    if (segundos >= 60) {
        segundos = 0;
        minutos++;
        if (minutos >= 60) {
            minutos = 0;
            horas++;
            if (horas >= 24) {
                horas = 0;
            }
        }
    }
    update_segments();
}

int main() {
    // Inicializa los LEDs y botones
    IOWR_ALTERA_AVALON_PIO_DIRECTION(LEDS_BASE, 0xFF);
    IOWR_ALTERA_AVALON_PIO_DIRECTION(BUTTONS_BASE, 0x00);

    // Inicializa los segmentos LED
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_HOUR_TENS_BASE, 0xFF);
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_HOUR_UNITS_BASE, 0xFF);
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_MINS_TENS_BASE, 0xFF);
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_MIN_UNITS_BASE, 0xFF);
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_SEC_TENS_BASE, 0xFF);
    IOWR_ALTERA_AVALON_PIO_DIRECTION(SSEG_SEC_UNITS_BASE, 0xFF);

    uint32_t prev_buttons_state = debounce_buttons(); // Estado inicial de botones
    update_segments(); // Inicializa la pantalla

    while (1) {
        uint32_t buttons_state = debounce_buttons();

        // Verifica si el estado de los botones ha cambiado
        if (buttons_state != prev_buttons_state) {
            prev_buttons_state = buttons_state;

            // Verifica qué botón se ha presionado
            if (buttons_state & 0x01) { // Botón 1: Selecciona horas
                selected_segment = 0;
            }
            if (buttons_state & 0x02) { // Botón 2: Selecciona minutos
                selected_segment = 1;
            }
            if (buttons_state & 0x04) { // Botón 3: Selecciona segundos
                selected_segment = 2;
            }

            // Incrementa el segmento seleccionado
            if (buttons_state & 0x08) { // Botón 4: Incrementar el valor
                switch (selected_segment) {
                    case 0: horas = (horas + 1) % 24; break;
                    case 1: minutos = (minutos + 1) % 60; break;
                    case 2: segundos = (segundos + 1) % 60; break;
                }
                update_segments();
            }
        }

        // Temporizador automático cada segundo
        auto_increment_time();
        for (int i = 0; i < 1000000; i++); // Delay aproximado para simular un segundo
    }

    return 0;
}

